{"pageProps":{"post":{"slug":"2020-11-17-booleans-are-wasted-memory","markdownBody":"\nA boolean is either `true` or `false`. That translates to `1` or `0`. If you think that one bit is enough to store this information, you'd be wrong.\n\nIn order to keep the binary layout of a program simple and convenient, most languages store information in 8 bit (1 byte) blocks.\nIf you allocate a `bool` in Rust or (most) other languages that are based on LLVM, [it will take up 1 `i1`, or 1 byte of memory](https://llvm.org/docs/LangRef.html#simple-constants). If you allocate a boolean value in C, you will get [an integer constant with a value of either 1 or 0](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdbool.h.html).\n\nIf you find yourself having to store multiple boolean states somewhere, you might simply declare those booleans and call it a day:\n\n```c\n#include <stdbool.h>\n#include <stdio.h>\nint main()\n{\n    bool can_read = true;\n    bool can_write = true;\n    bool can_execute = false;\n\n    if (can_read)\n        printf(\"read bit set\\n\");\n    if (can_write)\n        printf(\"write bit set\\n\");\n    if (can_execute)\n        printf(\"execute bit set\\n\");\n\n    // Output:\n    // read bit set\n    // write bit set\n}\n```\n\n## We can do better than this\n\nAn alternative approach to store boolean values is to share a \"chunk\" of bits with other values. This is usually done using bitwise operations:\n\n```c\n#include <stdbool.h>\n#include <stdio.h>\n\n// Define permissions\n#define PERM_NONE       0b000\n#define PERM_READ       0b001\n#define PERM_WRITE      0b010\n#define PERM_EXECUTE    0b100\n\n#define PERM_ALL        PERM_READ | PERM_WRITE | PERM_EXECUTE\n\nint main()\n{\n    // Allocate 1 byte for permissions\n    char permissions = PERM_READ | PERM_WRITE;\n\n    if (permissions & PERM_READ)\n        printf(\"write bit set\\n\");\n    if (permissions & PERM_WRITE)\n        printf(\"read bit set\\n\");\n    if (permissions & PERM_EXECUTE)\n        printf(\"execute bit set\\n\");\n\n    // Output:\n    // read bit set\n    // write bit set\n}\n```\n\nThis example still wastes 5 bits since we only use 3 out of 8 possible bits of the char type, but I'm sure you get the point. Allocating 3 boolean values independently would waste 7 \\* 3 = 21 bits, so it's a massive improvement. Whenever you find yourself needing multiple boolean values, think twice if you can use this pattern.\n\nMicrocontrollers have a very constrainted environment, therefore bitwise operations are essential in those scenarios. 7 wasted bits are a lot if there are only 4 kb of total memory available. For larger systems we often forget about these constraints, until they add up.\n\n## My Plea\n\n- Be mindful about the software you create.\n- Appreciate the resources at your disposal.\n","frontmatter":{"title":"Booleans are wasted memory","date":"2020-11-17","tags":"note, guide, programming"},"tags":["note","guide","programming"]},"recommendedPosts":[{"slug":"2023-06-01-single-page-applications-on-github-pages","frontmatter":{"title":"Single Page Applications on GitHub Pages","date":"2023-06-01","tags":"100DaysToOffload, guide, note, web, javascript, github"},"tags":["100DaysToOffload","guide","note","web","javascript","github"]},{"slug":"2023-04-27-migrating-homeassistant-from-sd-to-ssd","frontmatter":{"title":"Migrating Homeassistant from SD to SSD","date":"2023-04-27","tags":"100DaysToOffload, guide, note, homeassistant, homelab"},"tags":["100DaysToOffload","guide","note","homeassistant","homelab"]},{"slug":"2023-04-12-instant-dark-theme","frontmatter":{"title":"Instant dark theme","date":"2023-04-12","tags":"100DaysToOffload, guide, note, learnings, web, css, til"},"tags":["100DaysToOffload","guide","note","learnings","web","css","til"]},{"slug":"2023-03-30-designing-resilient-cloud-infrastructure","frontmatter":{"title":"Designing resilient cloud infrastructure","date":"2023-03-30","tags":"100DaysToOffload, infrastructure, aws, guide, note, learnings"},"tags":["100DaysToOffload","infrastructure","aws","guide","note","learnings"]},{"slug":"2023-03-23-fullscreen-terminals-in-vscode","frontmatter":{"title":"Fullscreen Terminals in VSCode","date":"2023-03-23","tags":"100DaysToOffload, guide, note, editors"},"tags":["100DaysToOffload","guide","note","editors"]}]},"__N_SSG":true}