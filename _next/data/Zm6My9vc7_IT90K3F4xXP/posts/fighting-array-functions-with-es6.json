{"pageProps":{"post":{"slug":"fighting-array-functions-with-es6","markdownBody":"\nYesterday, I came across an interesting bug regarding JavaScript Arrays, and I wanted to share my approach to fixing it.\nAt a basic level, I wanted to pass part of an array to a function, but wanted to use the original array later on.\n\n```js\nlet arr = [1, 2, 3, 4, 5]\nlet something = arr.splice(0, 3)\ndo(something) // []\nDoSomethingWithOriginal(arr)\n```\n\nThinking that Array.prototype functions don’t mutate the array directly, I moved on with my day. This lead to a bunch of problems down the line.\nSome array methods in the EcmaScript specification are designed to mutate arrays, while others do not.\n\n### Non-mutating functions\n\n- Array.prototype.map()\n- Array.prototype.slice()\n- Array.prototype.join()\n- …\n\nThese functions do not mutate the array they are called on. For example:\n\n```js\nlet arr = [1, 2, 3, 4, 5];\nlet partOfArr = arr.slice(1, 2);\nconsole.log(partOfArr); // [2, 3]\nconsole.log(arr); // [1, 2, 3, 4, 5]\n```\n\n### Mutating functions\n\n- Array.prototype.sort()\n- Array.prototype.splice()\n- Array.prototype.reverse()\n- …\n\nThese methods mutate the array directly. This can lead to unreadable code, as the value can be manipulated from anywhere. For example:\n\n```js\nlet arr = [5, 2, 4];\narr.sort();\nconsole.log(arr); // [2, 4, 5]\n```\n\nTo me, it is very unclear, which functions do, and which don’t mutate arrays directly. But, there’s a simple trick you can use to stop letting the functions mutate arrays directly, ultimately leading to more readable and reliable code.\n\n## Enter: The ES6 Spread Operator!\n\n![Spread Operator](https://images.unsplash.com/photo-1518297056586-889f796873e0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1225&q=80)\n\nTake a look at this snippet:\n\n```js\nlet arr = [3, 5, 1, 2, 4];\nlet sorted = [...arr].sort();\nconsole.log(arr); // [3, 5, 1, 2, 4]\nconsole.log(sorted); // [1, 2, 3, 4, 5]\n```\n\nVoilà! We have a sorted array, and the original one is also around. The spread operator(`[...arr]`) is used to create a new array with every value of arr .\nYou can use this for arrays, as well as objects:\n\n```js\nlet obj = {\n\tfield: \"example\",\n};\nlet extendedObj = {\n\t...obj,\n\tanotherField: 42,\n};\nconsole.log(extendedObj.field); // \"example\"\n```\n\n## Conclusion\n\nES6 brought us awesome features like let and const assignments, as well as arrow functions. A more unknown feature however is the spread operator. I hope you now know how to use the spread operator, and that you can adopt it for cleaner and simpler code.\n","frontmatter":{"title":"Fighting Array Functions with ES6","date":"2019-04-07","tags":"javascript, guide, programming, web"},"tags":["javascript","guide","programming","web"]},"recommendedPosts":[{"slug":"2024-01-05-greg-the-developer","frontmatter":{"title":"Greg, the Developer","date":"2024-01-05","tags":"note, tech, fun, shortstory, writing, programming, practices, devops"},"tags":["note","tech","fun","shortstory","writing","programming","practices","devops"]},{"slug":"2023-12-28-linkdump-2","frontmatter":{"title":"Linkdump #2","date":"2023-12-28","tags":"note, tech, programming, linkdump"},"tags":["note","tech","programming","linkdump"]},{"slug":"2023-12-22-10-000-hours","frontmatter":{"title":"10.000 Hours","date":"2023-12-22","tags":"100DaysToOffload, note, learnings, books, tech, programming"},"tags":["100DaysToOffload","note","learnings","books","tech","programming"]},{"slug":"2023-12-20-giving-my-blogroll-more-context","frontmatter":{"title":"re: Giving context to a blogroll","date":"2023-12-20","tags":"100DaysToOffload, note, web, meta, reply"},"tags":["100DaysToOffload","note","web","meta","reply"]},{"slug":"2023-12-18-overcoming-air-hunger","frontmatter":{"title":"Overcoming \"air hunger\"","date":"2023-12-18","tags":"100DaysToOffload, guide, note, life, til"},"tags":["100DaysToOffload","guide","note","life","til"]}]},"__N_SSG":true}