{"pageProps":{"post":{"slug":"introducing-slashdev-space","markdownBody":"\nHi! Welcome to the new home of my blog. Let me give you a small tour of why I built it, its underlying architecture and my ambitions with this project.\n\nMy old blog was based on [Gatsby.js](https://www.gatsbyjs.com/), a static site generator built on React. Back then, I used a quick and dirty blogging template I stole from the Gatsby themes page. Gatsby themes are essentially npm packages, that you throw in your project as a dependency. While it was super easy to set up, I had a hard time configuring it to my likings, since I relied on a framework someone else has provided.\n\nThe real turning point came, when I tried to build the blog after a few months of not maintaining it. I wasn't able to compile it, since some dependency of the blog template broke. Of course I could have forked the template and fixed it to my likings, but I didn't want to maintain yet another library until the end of my blogs life. You could draw some parallels to propriotary software, where you don't have the chance to look under the hood and see what's wrong, except in this case, it was just me being lazy.\n\n## A new approach\n\nWhat I want is a project that I have full control over. I want to be able to customize styling and add features whenever I want to. Gatsby would have been able to give me all of this, but I have the feeling that it sometimes overcomplicates things too much (Having a GraphQL backend is nice, but do you really need that?). I looked at frameworks like [Hugo](https://gohugo.io/) which offers lightning fast compilation, but with it, I would have been tied to \"the Hugo way\" of templating and configuring the project.\n\nIn the end it was [Next.js](https://nextjs.org/) that caught my attention the most, given how simple it is. There's not much configuration involved in the setup process (although getting it to work with github pages was somewhat tedious). Each component in the `pages/` directory corresponds to a full page on the website. The `public/` directory is served statically. That's really all I needed to build a modular webpage.\n\n## Wiring things up\n\nBecause Next.js is so minimalistic, there are some parts that you have to set up by yourself. Rendering markdown files for example does not come included, it has to be done manually. Thankfully, there are some packages that can do this for you. All you have to do is write the markdown to the specific pages. It basically boils down to this:\n\n```js\nconst posts = ((context) => {\n\tconst keys = context.keys();\n\tconst values = keys.map(context);\n\n\tconst data = keys.map((key, index) => {\n\t\t// Create slug from filename\n\t\tconst slug = key\n\t\t\t.replace(/^.*[\\\\\\/]/, \"\")\n\t\t\t.split(\".\")\n\t\t\t.slice(0, -1)\n\t\t\t.join(\".\");\n\t\tconst value = values[index];\n\t\t// Parse yaml metadata & markdownbody in document\n\t\tconst document = matter(value.default);\n\t\treturn {\n\t\t\tfrontmatter: document.data,\n\t\t\tmarkdownBody: document.content,\n\t\t\tslug,\n\t\t};\n\t});\n\treturn data;\n})(require.context(\"../content/posts\", true, /\\.md$/));\n```\n\nAnother special case was setting up a RSS feed. I basically had to write a simple script that generates the feed from all posts in the `content/posts` directory, let it run during every build and throws the output in the `public/` directory, so that it can be served as `/rss.xml`. You might argue that this is quite a tedious process for such a feature, but it gives me all the flexibility I want over the features of this project.\n\n## Deployment\n\nI've considered self hosting this blog on my server. While that would have been a fun learning-experience, I wanted to stick to the simple deploy-and-forget workflow I was used to from GitHub Actions. Every push to the master branch triggers a full deployment. No manual work required. Doing it this way, I also save the time and energy to set up SSL encryption, plus it is highly scalable (not that I expect a traffic-explosion, but you never know). Setting Next.js up to deploy to GitHub Pages takes some time, because there are some pitfalls that you have to be aware of. [This article](https://dev.to/jameswallis/deploying-a-next-js-app-to-github-pages-24pn) helped me a lot.\n\n## Ambitions\n\nIn the future, I want /dev.space to become more than just a blog. I want it to become a platform for my thoughts and ideas. I'm also playing with the idea to migrate my main website (https://garrit.xyz) over to /dev.space, therefore made sure that my current setup is very future-proof and can be easily extended.\n\nFeel free to dig through the source code for this project. You can find it on my GitHub: https://github.com/garritfra/slashdev.space\n\nLet me know if there is anything that you miss on this blog. Searchable posts? Dark-mode? This is only the beginning of /dev.space!\n","frontmatter":{"title":"Introducing my new blog - slashdev.space","date":"2020-10-08","tags":"meta"},"tags":["meta"]},"recommendedPosts":[{"slug":"2023-07-06-rss-changes","markdownBody":"\nIf you're subscribed to this blog via [RSS](/rss.xml), you will soon likely see\na bunch of my posts re-appearing in your feed. For that, I apologize in advance!\n\nI'm planning to make two modifications. Firstly, I want to add a `id` property\nto all entries. So far, your reader has been likely been relying on the URL slug\nto identify an entry. Adding the `id` property makes this more flexible, but it\nalso means that your reader will think that there are new entries in the feed.\nThis will only happen once.\n\nSecondly, I want to reduce the amount of the entries. If you look at the\n[feed](/rss.xml), you'll see a lot of junk from way back, containing every word\nI wrote on this blog. Remember that this page is fetched periodically (usually\nevery hour for most readers) by **every** subscriber. That's a lot of traffic\nthat could be better put to use somewhere else. Not that it costs me anything -\nthis site is hosted on [GitHub Pages](https://pages.github.com/) - but if this\nhelps reduce the carbon footprint of the site even by one gram, it's worth the\neffort.\n\nAs of the time of writing this post, by restricting the number of posts to 10,\nwe reduce the amount of traffic per client per hour from 272 kB down to to 24\nkB. That's over **2 GB** of traffic saved each year **per subscriber**!!\n\nThat's all - just a heads up. Thanks for your patience, you're awesome! ✌️\n\n---\n\nThis is post 071 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"PSA: RSS feed changes","date":"2023-07-06","tags":"100DaysToOffload, note, meta, rss"},"tags":["100DaysToOffload","note","meta","rss"]},{"slug":"2023-04-01-quality-vs.-quantity","markdownBody":"\nThe amount and quality of the posts on this blog strongly depends on my mood. Some times I want to write about every thought that crosses my mind, leading to 4+ average- to low-quality posts a week. I think I'm in one of these phases right now.\n\nSome other times, I feel like most of my thoughts are not worth the effort to write about, but the ones that I **do** write about, often become the ones that I'm [most](/posts/2021-04-07-pgp-guide) [proud](/posts/2021-10-04-server-side-caching-with-apollo-graphql) [of](/posts/2021-01-18-reasons-the-fediverse-is-better).\n\nThese phases act like opposing forces that coexist very well. Pumping out more thoughts of lesser quality frees up my mind for higher quality ones, and when I'm writing about higher quality thoughts, I get the urge to write more often, completing the circuit.\n\nIn the end, it's not about **what** you write about, but about the process of writing itself. Every post on a personal blog is [a snapshot of your thoughts at a point in time](https://kevquirk.com/thoughts-on-editing-posts/), no matter if you're feeling qualitative or quantitative.\n\n---\n\nThis is post 062 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Quality vs. Quantity","date":"2023-04-01","tags":"100DaysToOffload, note, opinion, meta, writing, life"},"tags":["100DaysToOffload","note","opinion","meta","writing","life"]},{"slug":"2022-10-05-simple-guestbook","markdownBody":"\n> **TL;DR**: Click [here](/guestbook) to view the guestbook.\n\nFor a while now, I wanted to have a quick way to update the pages on my website.\n\nGitHub has the\n[\".\"](https://docs.github.com/en/get-started/using-github/keyboard-shortcuts#source-code-editing)\nhotkey, which opens a web based editor for the file you're currently viewing.\nThis site now has this feature as well! To try it out, just hit `.`, and you'll\nbe redirected to the file editor for this page.\n\nTo see how I implemented this feature, you take a look at\n[this](https://github.com/garritfra/garrit.xyz/commit/658efa3a3ebfebebbf74d0eb6aae6c1cc9566516)\ncommit. It boils down to this snippet of code:\n\n```js\nwindow.addEventListener(\"keypress\", (e) => {\n\tif (e.key === \".\") {\n\t\tconst baseUrl = \"https://github.com/garritfra/garrit.xyz/edit/main/content\";\n\t\tconst filePath = window.location.pathname;\n\t\tconst url = `${baseUrl}${filePath}.md`;\n\n\t\twindow.location.href = url;\n\t}\n});\n```\n\nPretty simple, huh?\n\nSince this doesn't work on mobile devices, I also added [a custom 404\npage](https://github.com/garritfra/garrit.xyz/commit/8c374a8bc0b66192c454300489fee52e7299c9dd#diff-2cbafea0c9dff483ebab9ad670b1cdb3eb7aac552f9c161e42fee84c2efe3a69)\nwhich also redirects to the editor, if the filepath ends with in `/edit`.\n\nLet's have some fun and put this feature to use. I added a simple\n[guestbook](/guestbook) to this site, which is open to receive pull requests.\nI'd love to hear from you!\n\nThis is post 040 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"A simple guestbook","date":"2022-10-05","tags":"note, meta, 100DaysToOffload, guide"},"tags":["note","meta","100DaysToOffload","guide"]},{"slug":"2021-02-11-10-percent-100daystooffload","markdownBody":"\nComing into this, I didn't know what to expect. I'm not a huge writer, but so far I am pleasantly surprised about how relaxing this challenge is.\n\nAt first glance, writing a blog post every 3-5 days seems daunting. But the more I write, the more it becomes an enjoyable habit. I'm oftentimes looking forward to writing these posts. Whenever I have something on my mind, I jot it down without a plan or structure. And that's exactly the point of [#100DaysToOffload](https://100daystooffload.com/): **Just. Write.**\n\nSo far, these blog posts have helped me get a lot of my thoughts out of my head and onto paper (or on a screen). While writing, I reflect on what I think. I sometimes realize that what I thought is utter nonsense, but this in itself is an important reflection. With each post, I feel like I am getting more confident about the process.\n\nIf you're reading this and you don't have a blog yet, I would encourage you to give this technique a try. It doesn't matter that you produce quality content, nor does anyone have to see this. It's not the content that matters, but the process of producing it. Set up your own blog on [write.as](https://write.as/) or simply open your text editor of your choice and **Just. Write.**\n\nThis is post 011 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Thoughts after 10 Days of 100DaysToOffload","date":"2021-02-11","tags":"note, meta, 100DaysToOffload"},"tags":["note","meta","100DaysToOffload"]},{"slug":"2021-01-13-512kb-club","markdownBody":"\nJavaScript rules the web, literally. In fact, this website is built with JavaScript (Next.js). I recently started to think about if I really needed this much overhead for a simple site like this. After all, I don't have any fancy user interaction features or complex animation that would justify the JavaScript on this page.\n\nThere is a new (no, not that new) philosophy called [the lean web](https://leanweb.dev/). It essentially tries to keep websites tiny and semantically correct. This has many benefits, ranging from less pollution generated by your site to improved SEO, since many search engines favor a semantically correct website over a site that abuses JavaScript to mimic the features, that are baked into html anyway.\n\nIn order to get lean, I decided to join [the 512KB club](https://512kb.club/). This website lists sites that are below 512KB in total (uncompressed, with all dependencies). To get below that mark, I had to remove my face from the frontpage (I'm sure you'll miss it😅), since the image itself was roughly 750KB. I'm now just below 500KB, which qualifies me to join the blue team.\n\n[![Blue Team](https://512kb.club/images/blue-team.svg)](https://512kb.club)\n\nI'm not planning to stop here though. I think keeping a website small and simple is an excellent practice. My next step will be to get rid of all the JS junk on this site and only rely on HTML and CSS. I still want to be able to write my posts in Markdown, so I will have to come up with a way to generate pages from them. A safe bet for this would be to use a SSG like [Hugo](https://gohugo.io/). Frankly, [writing my own simple SSG probably wouldn't hurt either](https://erikwinter.nl/articles/2020/why-i-built-my-own-shitty-static-site-generator/). Let's see how high I can climb the ranks of the 512KB club. Care to join me?\n\nThis is post 003 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"I joined the 512KB club","date":"2021-01-13","tags":"web, javascript, 100DaysToOffload, meta"},"tags":["web","javascript","100DaysToOffload","meta"]}]},"__N_SSG":true}