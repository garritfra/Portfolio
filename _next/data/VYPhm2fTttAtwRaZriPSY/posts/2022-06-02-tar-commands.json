{"pageProps":{"post":{"slug":"2022-06-02-tar-commands","markdownBody":"\n> **Update**: [@kaushalmodi@mastodon.technology](https://mastodon.technology/@kaushalmodi)\n> replied to this post with a way more complete cheat sheet. If you don't want\n> to hear me rant about tar and actually want to get good at it, go read their\n> post instead:\n>\n> https://scripter.co/disarming-the-tar-bomb-in-10-seconds/\n\nGod dammit. I can't tell you how often I had to look up how to create or\nextract a tar archive on linux. There are SOO many options!!\n\n![xkcd 1168](https://imgs.xkcd.com/comics/tar_2x.png)\n\n## Let's settle this once and for all\n\nHere's how you create an archive:\n\n```\ntar cf archive.tar directory\n```\n\nTry to remember \"Create File\".\n\nAnd here's how you extract an archive:\n\n```\ntar xf archive.tar\n```\n\nFor this one, try to remember \"(e)Xtract File\".\n\nAnd if there's some other compressions in the mix: keep looking it up! A more\ncomprehensive cheat sheet can be found here:\nhttps://simplecheatsheet.com/linux-tar-files/\n\nSorry for this dumb post. I'm sure you can relate to my feelings. ;)\n\nThis is post 033 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Here's the tar command you keep looking for","date":"2022-06-02","tags":"note, 100DaysToOffload, linux"},"tags":["note","100DaysToOffload","linux"]},"recommendedPosts":[{"slug":"2021-12-31-btrfs-on-alpine","markdownBody":"\nI'm currently in the midst of migrating some of my infrastructure from the cloud\nto \"on prem\", aka a local server, aka my old PC. I wanted to try alpine linux as\nthe host OS to see how it behaves as a lightweight server distro.\n\nSo far it stands up quite nicely, it has everything you'd expect from a\nlinux-based operating system. The only problem I encountered was getting BTRFS\nto work out of the box. Here are some things you should know when using BTRFS on\nAlpine linux.\n\n### Installing BTRFS\n\nInstalling BTRFS is relatively straight forward. Simply install the package and\ntell Alpine to load the module on startup:\n\n```\napk add btrfs-progs\necho btrfs >> /etc/modules\n```\n\nTo load the module right away, you can use the following command:\n\n```\nmodprobe btrfs\n```\n\n### Mounting a volume\n\nIf you try mounting a btrfs volume via your fstab, you will get an error. This\nis because BTRFS does not know about the drives yet when the filesystems are\nmounted. To work around this, you can create an OpenRC service that runs a\n`btrfs scan` to detect the drives. To do so, create a service under\n`/etc/init.d/btrfs-scan` with the following content:\n\n```sh\n#!/sbin/openrc-run\n\nname=\"btrfs-scan\"\n\ndepend() {\n  before localmount\n}\n\nstart() {\n  /sbin/btrfs device scan\n}\n```\n\nMake the service executable and register it:\n\n```\nchmod +x /etc/init.d/btrfs-scan\nrc-update add btrfs-scan boot\n```\n\nNow, you should be able to add the volume to your `/etc/fstab`:\n\n```\nUUID=abcdef-0055-4958-990f-1413ed1186ec  /var/data  btrfs   defaults,nofail,subvol=@  0  0\n```\n\nAfter a reboot, you should be able to see the drive mounted at `/var/data`.\n\n### Resources\n\n- [Nathan Parsons - \"Using BTRFS on Alpine Linux\"](https://nparsons.uk/blog/using-btrfs-on-alpine-linux)\n- [A bug report about this problem](https://gitlab-test.alpinelinux.org/alpine/aports/-/issues/9539)\n\nThis is post 023 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"BTRFS on Alpine Linux","date":"2021-12-31","tags":"linux, infrastructure, note, guide, 100DaysToOffload, homelab"},"tags":["linux","infrastructure","note","guide","100DaysToOffload","homelab"]},{"slug":"2021-09-13-fixing-an-annoying-cron-gotcha","markdownBody":"\nA while ago I went through my server and reworked my [storage\nsetup](/posts/2021-02-07-storage-setup). As discribed in that blog post, I set\nup daily backups to [Backblaze\nB2](https://www.backblaze.com/b2/cloud-storage.html) using their amazing CLI\nthrough a cron script. A day went by and I noticed that the\n[healthcheck](/posts/2021-05-15-healthchecks-io-with-docker) didn't pass.\nUnfortunately I didn't have time to fix this problem immediately, so instead I\nexecuted the command by hand every couple of days. One could argue that this in\ntotal took way more time than the actual fix, but hey, I was lazy. In the end,\nI finally dedicated some time to fix this annoying issue.\n\nIt turns out that a command executed by cron doesn't run through sh or bash,\nbut in a minimal environment without your usual environment-variables. As a\nresult, my `b2` command (and many other commands for that matter) won't run as\nexpected, if at all. A quick fix is to run your command through bash or sh\nexplicitly:\n\n```sh\nsh -c \"mycommand\"\n```\n\nAlternatively, if you want all your entries to use sh or bash, you can set the\n`SHELL` variable at the very beginning of your crontab:\n\n```sh\nSHELL=/bin/bash\n\n15 1 * * * some_command\n```\n\n[Here](https://askubuntu.com/a/23438) is an answer that goes into more detail\nabout this. Have a great day!\n\nThis is post 019 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Finally fixing that annoying Cron gotcha","date":"2021-09-13","tags":"linux, guide, 100DaysToOffload, homelab"},"tags":["linux","guide","100DaysToOffload","homelab"]},{"slug":"2021-01-29-sudo-to-doas","markdownBody":"\nYou might have heard that there is currently [a pretty significant vulnerability](https://www.qualys.com/2021/01/26/cve-2021-3156/baron-samedit-heap-based-overflow-sudo.txt) affecting `sudo`, the program we all know and love. It is the de facto standard for when you want to run a command as a priviledged user, but that's really it. Under the hood, sudo is a very powerful tool with a lot of features. It can be used to build out complex permission-systems that span across entire clusters of servers. But all of these features come at a price: **complexity**. Last time I checked, the [source code](https://www.sudo.ws/repos/sudo) of sudo had about 330k lines of code (using cloc as a benchmark). This massive complexity plays a large role in its security.\n\nLuckily, there is a **far** more lightweight alternative to sudo called [doas](https://github.com/Duncaen/OpenDoas.git). It essentially does all the things you'd expect from sudo for your average end user. Doas is written in just over 3k lines of code, which, if you think of it, should be more than enough to provide a tool that executes a command as a priviledged user.\n\n## Setup\n\nWhile there are packages for [some distibutions](https://github.com/slicer69/doas#installation-via-packagesrepositories), I personally had trouble setting it up on arch using yay (for permission reasons, ironically). I recommend going the extra mile and building it from source, which consists of a few commands and some seconds of your time:\n\n```sh\ngit clone https://github.com/slicer69/doas\ncd doas\nmake\nsudo make install\n```\n\nNext, you will need to create a config file at `/usr/local/etc/doas.conf`. Paste the following line into it to give your user root access:\n\n```sh\npermit alice as root\n```\n\nYou obviously want to substitute alice with your username. If you have multiple users on your system, simply duplicate that line and substitute the username accordingly. Just restart your terminal window, and you should be able to run programs as root using doas instead of sudo:\n\n```sh\nâžœ  ~ doas id\nuid=0(root) gid=0(root) groups=0(root)\n```\n\n## Bonus: Save your muscle memory\n\nIf you still want to \"use\" sudo on your machine, you can set up a simple alias in your `.{bash|zsh|fish}rc`. This will also help with compatibility issues of some scripts, if you decide to ditch the actual sudo from your Box entirely. Just paste this line into your corresponding rc file:\n\n```\nalias sudo=\"doas\"\n```\n\n## Bonus Bonus: Passwordless authentification\n\nYou can setup doas to skip the password prompt every time you run a command with it. Simply add the `nopass` option in your doas configuration file:\n\n```sh\npermit nopass alice as root\n```\n\nI hope you found this useful!\n\nThis is post 008 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"From sudo to doas","date":"2021-01-29","tags":"linux, 100DaysToOffload, guide"},"tags":["linux","100DaysToOffload","guide"]},{"slug":"2021-01-15-compiling-your-own-kernel","markdownBody":"\nI'm currently in the midst of fiddling around with the kernel a bit, and I figured I just documented my process a bit. Unfortunately, since I'm using a Mac for day to day work, I have to rely on a virtual machine to run anything Linux-related. VirtualBox doesn't support the most recent kernels (5.9 is the most recent supported one), so there won't be any cutting-edge development happening here. I decided to use ubuntu as my guest system, since it's very easy to set up.\n\nSo, the first step is to get the sources. You could simply go ahead and download a specific release from [kernel.org](https://kernel.org/), but since I want to hack on it, I decided to go the git-route. Simply download the sources from [their repo](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/) and check out the tag you want to build.\n\n> **Note**: this might take a while. Their repository is huge! If you want to only need the `HEAD` and want to build on bare-metal (no VirtualBox), you could only clone the latest commit using `git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git --depth=1`.\n\nNext up, you need to generate a `.config`. This file describes which features you want to compile into your kernel. To make a generic config that only compiles drivers for the hardware of your system, you can run the following commands:\n\n```bash\n# Copy the config of your current kernel into the repo\nmake oldconfig\n\n# Only enable modules that are currently used by the system\nmake localmodconfig\n```\n\nNow, let's get to actually compiling the kernel. In my case, I assigned 4 cores to my VM. The `-j` option tells make to run 4 jobs in parallel.\n\n> **Caution**: Just providing -j will freeze your system, since make will try to launch an infinite amount of processes!\n\n```\nmake -j4\n```\n\nAgain, this might take some time. Go for a walk, get a coffee or watch your favorite TV-show. After compilation has finished, we need to install the kernel. To do so, run the following commands:\n\n```\nsudo make modules_install\nsudo make install\n```\n\nIn order to boot, we need to tell our bootloader about our new kernel. Run this command to update your grub config:\n\n```\nsudo update-grub2\n```\n\nAnd voila! Your new kernel should be ready.\n\nReboot the system, and grub should pick up the new kernel and boot to it. If that's not the case, you should be able to pick the kernel from the grub menu under `advanced options`.\n\n## Retrospective\n\nI found that building my own kernel is a highly educational and fun experience. Using VirtualBox is a pain in the `/dev/null` to work with, since it has to add a lot of overhead to the system in order to work. You sometimes have to wait over 6 month until the support for a new kernel arrives. This problem should not apply if you compile on bare metal systems.\n\nThanks for your time!\n\nThis is post 004 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Compiling your own kernel","date":"2021-01-15","tags":"linux, guide, 100DaysToOffload, infrastructure"},"tags":["linux","guide","100DaysToOffload","infrastructure"]}]},"__N_SSG":true}