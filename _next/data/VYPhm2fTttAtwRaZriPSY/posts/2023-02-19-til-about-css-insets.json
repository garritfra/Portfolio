{"pageProps":{"post":{"slug":"2023-02-19-til-about-css-insets","markdownBody":"\r\nJust a quick tip that I thought is worth sharing. Instead of declaring:\r\n\r\n```css\r\n.foo { \r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n}\r\n```\r\n\r\nyou can just use:\r\n\r\n```css\r\n.foo {\r\n  inset: 0;\r\n}\r\n```\r\n\r\nIt's supported everywhere computers are sold!\r\n\r\nMDN: https://developer.mozilla.org/en-US/docs/Web/CSS/inset\r\n\r\nSource: https://front-end.social/@estelle/109878532782943511\r\n\r\nThis is post 047 of [#100DaysToOffload](https://100daystooffload.com/).\r\n","frontmatter":{"title":"TIL about CSS Insets","date":"2023-02-19","tags":"web, note, til, quick-tip, css, 100DaysToOffload"},"tags":["web","note","til","quick-tip","css","100DaysToOffload"]},"recommendedPosts":[{"slug":"2023-06-01-single-page-applications-on-github-pages","markdownBody":"\nMy latest project, [sendpasswords.net](https://sendpasswords.net/) is a [Single Page Application](https://developer.mozilla.org/en-US/docs/Glossary/SPA) deployed on GitHub Pages.\n\nGitHub Pages is configured in a way to host static HTML files without any bells and whistles. This means that if you try to fetch a document that's *not* the index, for example `/foo`, the server will try to load the file with that name. \n\nBy nature, SPAs only consist of a single HTML entry point (`index.html` in most cases). It's responsible for routing the user to the correct page if there are multiple paths. And here's the crux: if the user tries to load `/foo`, he will not land at the SPA entry point. Instead, he will see a `404` error.\n\n## The solution\n\nA `404` response will automatically return a file called `404.html`, which we can use to our advantage. After building the application, simply copy the `index.html` to `404.html`, as demonstrated by [this commit](https://github.com/garritfra/sendpasswords.net/commit/66bdb68c229a3ac3386f7816a746155e658eb586). This will use `index.html` to serve the application on the root level, and `404.html` to load *the same app* if the page doesn't exist as a file. Whether the `index.html` is needed if there's already a `404.html` is up to you. I left it in to make clear that this is just a workaround.\n\nThis is a [well known](https://stackoverflow.com/a/69308662/9046809) workaround, but I wanted to bring some extra awareness to it, since it's a problem I ran into a couple of times so far. Happy SPAing!\n\n---\n\nThis is post 069 (nice) of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Single Page Applications on GitHub Pages","date":"2023-06-01","tags":"100DaysToOffload, guide, note, web, javascript, github"},"tags":["100DaysToOffload","guide","note","web","javascript","github"]},{"slug":"2023-04-12-instant-dark-theme","markdownBody":"\nThanks to [Jacksons](https://jacksonchen666.com/) [update to darktheme.club](https://github.com/garritfra/darktheme.club/pull/79), I just came across a neat little [CSS property](https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme) that turns a mostly CSS-free document into a pleasantly dark site:\r\n\r\n```css\r\n:root {\r\n  color-scheme: light dark;\r\n}\r\n```\r\n\r\nThis will adjust all elements on the page to the color scheme preferred by the user - without any other custom styles! ü§Ø It is also [widely supported](https://caniuse.com/mdn-css_properties_color-scheme) by browsers.\r\n\r\nI've always been quite dependent on CSS-frameworks for any project I'm starting. Going forward, I'd be interested to see how framework-less sites would feel using this property. If all else fails, there's always the awesome [simple.css](https://simplecss.org/) library, which you can slap on top of a raw document to make it pretty (and dark, if preferred) without using custom classes.\r\n\r\n---\r\n\r\nThis is post 064 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Instant dark theme","date":"2023-04-12","tags":"100DaysToOffload, guide, note, learnings, web, css, til"},"tags":["100DaysToOffload","guide","note","learnings","web","css","til"]},{"slug":"2023-02-22-dockerignore-troubles","markdownBody":"\r\nI commonly used to create a `.Dockerignore` file next to my `Dockerfile`. After countless hours of ignoring the problems in my setup, I found out that the uppercase `.Dockerignore` doesn't get picked up by Docker on MacOS. Only the lowercase `.dockerignore` is valid.\r\n\r\nI didn't find official documentation on this, but I think it's because both MacOS and Linux are case-sensitive, while Windows isn't. I don't remember why I got used to the `.Dockerignore` convention, but I swear I saw someone using it in the wild. Or it's my (un)logical reasoning that, because `Dockerfile` is uppercased, `.Dockerignore` should be uppercased as well.\r\n\r\nEither way, stay away from `.Dockerfile`s and stick to `.dockerfile`s.\r\n\r\nThis is post 050 of [#100DaysToOffload](https://100daystooffload.com/).\r\n","frontmatter":{"title":"Dockerignore troubles","date":"2023-02-22","tags":"note, docker, web"},"tags":["note","docker","web"]},{"slug":"2022-11-11-cursed-user-agents","markdownBody":"\n> **Warning**: This is a rather ranty post. I just needed a place to dump my emotions about this topic. Please take it with a grain of salt. :)\n\nI'm currently [fiddling\naround](https://github.com/garritfra/ua-parser-js/pull/8) with User-Agents of\nSmart TVs, or more specifically [HbbTV](https://www.hbbtv.org/). Interpreting\nthem is an absolute nightmare, so let me rant about interesting edge-cases I\ndiscovered along the way.\n\nTo set the mood: User-Agents in this field have a standardized format, yet many\nvendors seem to do their own thing, making it impossible to build one parser to\nrule them all. For reference, here's what the HbbTV section in a user agent\nSHOULD look like:\n\n```\nHbbTV/<version> (<capabilities>; <vendorName>; <modelName>; <softwareVersion>; [<hardwareVersion>]; <familyName>; <reserved>)\n```\n\n## The \"we'll update that later\"\n\n```\nHbbTV/1.1.1 (; Loewe; MB180; 1.0; 1.0;) NetFront/4.1\n```\n\n1.0 for both software and hardware versions suspiciously looks like a working\ntitle. At least we get some information about the vendor and the model.\n\n## The Overcommitted\n\n```\nMozilla/5.0 (Linux armv7l) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 OPR/40.0.2207.0 OMI/4.9.0.237.DOM3-OPT.245 Model/Vestel-MB211 VSTVB MB200 HbbTV/1.2.1 (; JVC; MB211; 3.19.4.2; _TV_NT72563_2017 SmartTvA/3.0.0\n```\n\nIt's nice that we get a lot of information about the device, yet no one seemed\nto check if the string actually fits into storage.\n\n## The Lazy Boy\n\n```\nHbbTV/1.1.1 (;;;;;) Maple;2011\n```\n\nTo be fair, this is one of the earliest HbbTV devices ever. No one knew that\nthis technology would stand the test of time. Apparently not even Samsung.\n\n## Conclusion\n\nI learned that building a generic parser for user agents isn't easy, especially\nif the devices you work with could be over a decade old.\n\nOne thing that all devices do seem to get right though is the presence of the\nHbbTV section in the User-Agent. I did not encounter a single device without it.\n\nThis is post 042 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Cursed User-Agents","date":"2022-11-11","tags":"note, 100DaysToOffload, web"},"tags":["note","100DaysToOffload","web"]},{"slug":"2022-05-24-cloning-windows-to-a-new-drive","markdownBody":"\nMy grandpa has been using his current computer for about 10 years now. After\nsuch a long time, the system has become quite slow and bulky. Back then it was\nrelatively normal to use a HDD as a primary hard drive, which adds to the slow\nexperience. It was time for an upgrade!\n\n> **TL;DR**: Use [Clonezilla](https://clonezilla.org/) on a live usb stick to\n> create an exact copy of your old drive onto your new one.\n\nI got him a 512 GB SSD, which, conveniently, is the same size of his current\nHDD. While installing the new drive alongside his existing one, I thought about\nhow to copy the existing Windows-installation.\n\nNa√Øvely, I thought that I could just `dd` the contents of the HDD onto the new\ndrive would work, since, _every byte is copied as is_, or at least that's what I\nthought. Turns out it wasn't that easy. I'm sure it would've worked if I was\nmore careful, but by default, `dd` just wipes over each byte, not caring if it\nmade a mistake. After very long 5 hours, I came back to the PC to see that it\nfinished copying the 512 GB (yes, it's not just copying the data, it's copying\nthe entire partition!). In a super excited mood, I restarted the PC and selected\nthe SSD as a boot medium. Aaaaand... nothing. Windows tried to repair some stuff\nbut it wasn't successful. I fiddled around with the boot partition a bit, but I\nhad to give up after an hour or so.\n\n## The second attempt\n\nAfter researching a bit (I should've done that sooner...) I stumbled across\n[Clonezilla](https://clonezilla.org/), a Linux distribution custom-built for\nthis purpose. I flashed it onto a usb-stick and started the cloning process.\nAfter just 20 minutes (!), it was done cloning the existing data. The process is\nextremely simple!\n\nBefore rebooting, I disconnected the old drive to make sure that there's no\nfunny business going on. Apparently, Windows had to self-adjust UIDs of the\ndrives, but after a short \"Preparing Windows\" animation, the system started up\nas expected. **Success**!!\n\nThe performance of the new hard drive is amazing, at least compared to the HDD\nmy grandpa had before. Plus, we can use the existing HDD to take full system\nbackups every now and then, using the same process.\n\nThis is post 031 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Cloning Windows to a new drive","date":"2022-05-24","tags":"note, guide, windows, til, 100DaysToOffload"},"tags":["note","guide","windows","til","100DaysToOffload"]}]},"__N_SSG":true}