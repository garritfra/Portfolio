{"pageProps":{"post":{"slug":"2022-11-11-cursed-user-agents","markdownBody":"\n> **Warning**: This is a rather ranty post. I just needed a place to dump my emotions about this topic. Please take it with a grain of salt. :)\n\nI'm currently [fiddling\naround](https://github.com/garritfra/ua-parser-js/pull/8) with User-Agents of\nSmart TVs, or more specifically [HbbTV](https://www.hbbtv.org/). Interpreting\nthem is an absolute nightmare, so let me rant about interesting edge-cases I\ndiscovered along the way.\n\nTo set the mood: User-Agents in this field have a standardized format, yet many\nvendors seem to do their own thing, making it impossible to build one parser to\nrule them all. For reference, here's what the HbbTV section in a user agent\nSHOULD look like:\n\n```\nHbbTV/<version> (<capabilities>; <vendorName>; <modelName>; <softwareVersion>; [<hardwareVersion>]; <familyName>; <reserved>)\n```\n\n## The \"we'll update that later\"\n\n```\nHbbTV/1.1.1 (; Loewe; MB180; 1.0; 1.0;) NetFront/4.1\n```\n\n1.0 for both software and hardware versions suspiciously looks like a working\ntitle. At least we get some information about the vendor and the model.\n\n## The Overcommitted\n\n```\nMozilla/5.0 (Linux armv7l) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36 OPR/40.0.2207.0 OMI/4.9.0.237.DOM3-OPT.245 Model/Vestel-MB211 VSTVB MB200 HbbTV/1.2.1 (; JVC; MB211; 3.19.4.2; _TV_NT72563_2017 SmartTvA/3.0.0\n```\n\nIt's nice that we get a lot of information about the device, yet no one seemed\nto check if the string actually fits into storage.\n\n## The Lazy Boy\n\n```\nHbbTV/1.1.1 (;;;;;) Maple;2011\n```\n\nTo be fair, this is one of the earliest HbbTV devices ever. No one knew that\nthis technology would stand the test of time. Apparently not even Samsung.\n\n## Conclusion\n\nI learned that building a generic parser for user agents isn't easy, especially\nif the devices you work with could be over a decade old.\n\nOne thing that all devices do seem to get right though is the presence of the\nHbbTV section in the User-Agent. I did not encounter a single device without it.\n\nThis is post 042 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Cursed User-Agents","date":"2022-11-11","tags":"note, 100DaysToOffload, web"},"tags":["note","100DaysToOffload","web"]},"recommendedPosts":[{"slug":"2023-06-01-single-page-applications-on-github-pages","markdownBody":"\nMy latest project, [sendpasswords.net](https://sendpasswords.net/) is a [Single Page Application](https://developer.mozilla.org/en-US/docs/Glossary/SPA) deployed on GitHub Pages.\n\nGitHub Pages is configured in a way to host static HTML files without any bells and whistles. This means that if you try to fetch a document that's *not* the index, for example `/foo`, the server will try to load the file with that name. \n\nBy nature, SPAs only consist of a single HTML entry point (`index.html` in most cases). It's responsible for routing the user to the correct page if there are multiple paths. And here's the crux: if the user tries to load `/foo`, he will not land at the SPA entry point. Instead, he will see a `404` error.\n\n## The solution\n\nA `404` response will automatically return a file called `404.html`, which we can use to our advantage. After building the application, simply copy the `index.html` to `404.html`, as demonstrated by [this commit](https://github.com/garritfra/sendpasswords.net/commit/66bdb68c229a3ac3386f7816a746155e658eb586). This will use `index.html` to serve the application on the root level, and `404.html` to load *the same app* if the page doesn't exist as a file. Whether the `index.html` is needed if there's already a `404.html` is up to you. I left it in to make clear that this is just a workaround.\n\nThis is a [well known](https://stackoverflow.com/a/69308662/9046809) workaround, but I wanted to bring some extra awareness to it, since it's a problem I ran into a couple of times so far. Happy SPAing!\n\n---\n\nThis is post 069 (nice) of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Single Page Applications on GitHub Pages","date":"2023-06-01","tags":"100DaysToOffload, guide, note, web, javascript, github"},"tags":["100DaysToOffload","guide","note","web","javascript","github"]},{"slug":"2023-04-12-instant-dark-theme","markdownBody":"\nThanks to [Jacksons](https://jacksonchen666.com/) [update to darktheme.club](https://github.com/garritfra/darktheme.club/pull/79), I just came across a neat little [CSS property](https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme) that turns a mostly CSS-free document into a pleasantly dark site:\r\n\r\n```css\r\n:root {\r\n  color-scheme: light dark;\r\n}\r\n```\r\n\r\nThis will adjust all elements on the page to the color scheme preferred by the user - without any other custom styles! ðŸ¤¯ It is also [widely supported](https://caniuse.com/mdn-css_properties_color-scheme) by browsers.\r\n\r\nI've always been quite dependent on CSS-frameworks for any project I'm starting. Going forward, I'd be interested to see how framework-less sites would feel using this property. If all else fails, there's always the awesome [simple.css](https://simplecss.org/) library, which you can slap on top of a raw document to make it pretty (and dark, if preferred) without using custom classes.\r\n\r\n---\r\n\r\nThis is post 064 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Instant dark theme","date":"2023-04-12","tags":"100DaysToOffload, guide, note, learnings, web, css, til"},"tags":["100DaysToOffload","guide","note","learnings","web","css","til"]},{"slug":"2023-02-22-dockerignore-troubles","markdownBody":"\r\nI commonly used to create a `.Dockerignore` file next to my `Dockerfile`. After countless hours of ignoring the problems in my setup, I found out that the uppercase `.Dockerignore` doesn't get picked up by Docker on MacOS. Only the lowercase `.dockerignore` is valid.\r\n\r\nI didn't find official documentation on this, but I think it's because both MacOS and Linux are case-sensitive, while Windows isn't. I don't remember why I got used to the `.Dockerignore` convention, but I swear I saw someone using it in the wild. Or it's my (un)logical reasoning that, because `Dockerfile` is uppercased, `.Dockerignore` should be uppercased as well.\r\n\r\nEither way, stay away from `.Dockerfile`s and stick to `.dockerfile`s.\r\n\r\nThis is post 050 of [#100DaysToOffload](https://100daystooffload.com/).\r\n","frontmatter":{"title":"Dockerignore troubles","date":"2023-02-22","tags":"note, docker, web"},"tags":["note","docker","web"]},{"slug":"2023-02-19-til-about-css-insets","markdownBody":"\r\nJust a quick tip that I thought is worth sharing. Instead of declaring:\r\n\r\n```css\r\n.foo { \r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n}\r\n```\r\n\r\nyou can just use:\r\n\r\n```css\r\n.foo {\r\n  inset: 0;\r\n}\r\n```\r\n\r\nIt's supported everywhere computers are sold!\r\n\r\nMDN: https://developer.mozilla.org/en-US/docs/Web/CSS/inset\r\n\r\nSource: https://front-end.social/@estelle/109878532782943511\r\n\r\nThis is post 047 of [#100DaysToOffload](https://100daystooffload.com/).\r\n","frontmatter":{"title":"TIL about CSS Insets","date":"2023-02-19","tags":"web, note, til, quick-tip, css, 100DaysToOffload"},"tags":["web","note","til","quick-tip","css","100DaysToOffload"]},{"slug":"2022-03-18-fix-traefik-proxy-issues","markdownBody":"\nAfter changing my proxy from NGINX to Traefik, I noticed that some of my\nservices started misbehaving.\n\nIn particular, my instance of\n[BirdsiteLive](https://github.com/NicolasConstant/BirdsiteLive)\n([birdsite.slashdev.space](https://birdsite.slashdev.space)) had issues\nforwarding tweets to the\n[Fediverse](https://garrit.xyz/posts/2021-01-18-reasons-the-fediverse-is-better).\n\nThe only difference between my old NGINX and my Traefik config were the headers.\nI didn't think that that's what's causing the issue, but after digging around a\nbit I figured out what's wrong. I still can't wrap my head around it entirely,\nbut it has something to do with forwarding external `https` requests to internal\n`http` services, since the `x-forwarded-` headers where missing in the forwarded\nrequests.\n\nIn the world of NGINX, we can instruct the proxy to forward _all_ headers using\nthis directive:\n\n```conf\nproxy_pass_request_headers      on;\n```\n\nwhich takes care of the issue. In Traefik, it's a bit more convoluted. Traefik\ncan use a combination of \"Entrypoints\" and middleware to route traffic around.\nIn my setup, I use a `webSecure` entrypoint listening for SSL/TLS traffic, and a\n`web` entrypoint that just redirects to `webSecure`:\n\n```yaml\nentryPoints:\n  web:\n    address: :80\n    http:\n      redirections:\n        entryPoint:\n          to: \"websecure\"\n          scheme: \"https\"\n\n  websecure:\n    address: :443\n```\n\nApparently, some services send requests to the `web` entrypoint, and the\n`x-forwarded-for` headers are dropped. To prevent this, you can set the\n`proxyProtocol` and `forwardedHeaders` in the `web` entrypoint to `insecure`,\nlike so:\n\n```yaml\nentryPoints:\n  web:\n    address: :80\n    proxyProtocol:\n      insecure: true\n    forwardedHeaders:\n      insecure: true\n    # ...\n# ...\n```\n\nI'm sure there's a reason why this is marked as `insecure`, but it behaves just\nlike the NGINX counterpart, so I didn't bother digging deeper into the matter.\nMaybe one day I'll come back to properly fix this.\n\nIf you want to read more, check out\n[this](https://medium.com/@_jonas/traefik-kubernetes-ingress-and-x-forwarded-headers-82194d319b0e)\narticle on Medium. It explains the issue in more detail.\n\n---\n\nThis is post 025 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Fixing Traefik Proxy Issues","date":"2022-03-18","tags":"note, guide, infrastructure, web, 100DaysToOffload, homelab"},"tags":["note","guide","infrastructure","web","100DaysToOffload","homelab"]}]},"__N_SSG":true}