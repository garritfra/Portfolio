{"pageProps":{"post":{"slug":"2021-02-17-notes-on-flutter-web","markdownBody":"\nThese are some notes I took for the evaluation of Flutter web for a potential project at work. I decided to build a frontend for [Miniflux](https://miniflux.app/), since I figured it may enclose many pitfalls an application could potentially have. You can find the current prototype [here](https://github.com/garritfra/FlutterFlux).\n\n## The Good\n\n- **Trivial to set up**: Running a Flutter application in a browser, no matter if it is an existing app or a fresh project, can be done by simply specifying the -d chrome flag.\n\n- **Same behavior compared to mobile app**: Since the app is quite literally a mobile application running in the browser, the page looks and feels like a mobile application. It gives the app a consistent look and feel across all devices. I can imagine this coming in handy for web applications that are primarily used on phones and tablets.\n\n- **Browser API integration**: It seems like many of the libraries make use of Web APIs. For example: I was able to get location updates using the location package, and store data using [localstorage](https://pub.dev/packages/localstorage). Whether the Web target is supported, is noted as a flag in the package documentation.\n\n- **Alternative Backends**: There are two [rendering backends](https://flutter.dev/docs/development/tools/web-renderers), both with its own benefits and drawbacks. The HTML renderer optimizes the page for the browser, which improves performance at the cost of consistency. The CanvasKit renderer renders WebGL using WebAssembly. This gives a consistent look and feel across all devices, at the cost of Performance and download size. If auto is specified, the renderer will be determined based on the device type. Here’s a comparison of the same app rendered with both backends:\n\n|                    HTML                    |                    CanvasKit                    |\n| :----------------------------------------: | :---------------------------------------------: |\n| ![](/assets/flutter_web_renderer_html.png) | ![](/assets/flutter_web_renderer_canvaskit.png) |\n\n## The Bad\n\n- **Still in Beta**: Flutter web requires the developer to use the beta channel of Flutter. I didn’t encounter any issues, but it could be that some features are unstable.\n\n- **No native HTML (With an exception)**: Flutter Web renders the application into its own container, which is not using semantic HTML. The resulting application is also not debuggable using standard web-dev tools, but flutters debugging features can be used. There is a workaround though. Using the [easy_web_view](https://pub.dev/packages/easy_web_view) package, I was able to embed html components as flutter widgets. The embedded code is actual HTML code that the browser itself is rendering, not Flutter. This solution is cross-platform, meaning that it also works flawlessly for mobile builds of the application. This might come in handy if the project demands to embed a javascript component like a video player. This approach could technically also improve SEO, but I’m unsure how a full-blown application only using this approach would behave.\n\n## The Ugly\n\n- **Scrolling feels sluggish**: The scrolling behavior is implemented by flutter itself and does not feel as smooth as the native scrolling behavior of modern browsers.\n\n- **SEO nearly impossible**: Since the application is a SPA and it is not using semantic HTML, it’s very difficult to do any kind of SEO. Lighthouse rated the demo application with a perfect 100 for SEO, but this is probably because it is only aware of the html that surrounds the flutter container. I didn’t find a way to Inject Metatags on a per-site basis.\n\n- **Heavy and slow on old devices**: Even a basic application like the Todo app is very heavy and slow when compared to a “regular” website.\n\n## Conclusion\n\nFlutter Web seems to be a viable candidate to build truly cross-platform applications. Adding Web as a target for existing Flutter mobile apps should be relatively easy. The layout will probably need to be optimized to get the full experience. Native Web APIs seem to be well supported and documented.\n\nThe resulting web application is a PWA running inside a container. It is relatively heavy and requires much more resources to run, when compared to a “regular” web application.\n\nI hope you found this useful!\n\nThis is post 012 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Flutter Web - the Good, the Bad and the Ugly","date":"2021-02-17","tags":"flutter, 100DaysToOffload, note, programming"},"tags":["flutter","100DaysToOffload","note","programming"]},"recommendedPosts":[{"slug":"2022-09-30-debugging-docker-images","markdownBody":"\nDocker builds images incrementally. Every line in a Dockerfile will generate a\nnew image that builds on top of the last one. This can be really handy if\nsomething is not right in your build.\n\nSince version 18.09 Docker has added a new backend for building images,\n[buildkit](https://github.com/moby/buildkit#buildkit). Unfortunately, buildkit\ndoes not let you view the IDs of the intermediate containers it uses under the\nhood. To work around that, you can opt out of buildkit by running a build with\nbuildkit disabled:\n\n```sh\nDOCKER_BUILDKIT=0 docker build --pull --rm -t myproject:latest .\n```\n\nYou should now see the IDs of the intermediate containers:\n\n```sh\nSending build context to Docker daemon  87.84MB\nStep 1/16 : FROM node:16.15.1-alpine3.16 AS development\n16.15.1-alpine3.16: Pulling from library/node\nDigest: sha256:c785e617c8d7015190c0d41af52cc69be8a16e3d9eb7cb21f0bb58bcfca14d6b\nStatus: Image is up to date for node:16.15.1-alpine3.16\n ---> e548f8c9983f\nStep 2/16 : WORKDIR /usr/src/app\n ---> Using cache\n ---> 34e5c9bdb910\nStep 3/16 : COPY package*.json ./\n ---> Using cache\n ---> 626e4ae998fc\nStep 4/16 : RUN npm install glob rimraf\n ---> Using cache\n ---> 2d036b8354e0\nStep 5/16 : RUN npm install\n ---> Using cache\n ---> 948709b4957f      <-- HERE\nStep 6/16 : COPY . .\n...\n```\n\nAs mentioned, these IDs are valid docker images, so you can just launch them\nand attach a shell like every other image:\n\n```sh\ndocker run -ti --rm 948709b4957f\n```\n\nIf you're not seeing a regular shell, but a Node.js REPL for example, this\nmight be because the `ENTRYPOINT` of that image was set to the binary of that\nREPL. To work around that, you can override the entrypoint:\n\n```sh\ndocker run -ti --rm --entrypoint=/bin/sh 948709b4957f\n```\n\n## When is this helpful?\n\nIf your build fails at a particular step, you can attach a shell to the **last\nworking** step, inspect the filesystem, and execute the failing command manually.\n\nThat's all!\n\nThis is post 039 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Debugging Docker images","date":"2022-09-30","tags":"note, 100DaysToOffload, guide, programming, docker"},"tags":["note","100DaysToOffload","guide","programming","docker"]},{"slug":"2022-06-29-the-only-true-answer-to-tabs-vs-spaces","markdownBody":"\nI recently dove into a new project at work. We're starting from a blank page,\nso of course this classic question came up:\n\n> \"So should we use tabs or spaces for our formatting?\"\n\nOne of my teammates explained to us why the only logical answer to this is\n\"Tabs\", and you'll soon know why.\n\n## The problem\n\nMost formatters, by default, use either two or four spaces for indentation by\ndefault. The [Prettier](https://prettier.io/) formatter does this, and it\nsomewhat became the norm for JavaScript projects. This has one huge downside\nthough: everyone on the team has to agree, or live with this standard.\n\nNowadays, almost all editors come with the ability to change the preferred\nindentation settings, which will be overridden by the settings of the\nformatter. I prefer an indentation of 4 spaces, which is reflected in all of my\ncode. If I'm working on a project that uses an indentation of 2 spaces via\nprettier, my preference will be overridden when formatting the code.\n\n## Just use tabs\n\nThe solution to this problem is simple: Create a `.editorconfig` file and set\nthe indentation style to tab, without a width:\n\n```editorconfig\nroot = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\nindent_style = tab\n```\n\nAlmost all editors will be able to pick this file up and configure some\nproject-wide settings. If your editor is configured to use a indent width of 4,\nthis setting will be respected. If you're a maniac that indents their code with\n8 spaces, you'll be pleased to see that you can finally use this style in your\ncode, without forcing anyone else to do as you do.\n\nEven GitHub, GitLab and friends are able to respect this setting, giving\neveryone the opportunity to view code in their preferred style.\n\nI hope you now know why using a single tab of indentation makes the most sense if\nyou're working in a team. Let me know your thoughts!\n\nThis is post 035 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"The only true answer to 'tabs vs spaces'","date":"2022-06-29","tags":"note, guide, 100DaysToOffload, programming, practices"},"tags":["note","guide","100DaysToOffload","programming","practices"]},{"slug":"2022-03-24-swapping-numbers-without-temp","markdownBody":"\nEver wondered how to swap two numbers without using a temporary variable?\n\nI just found this very old note that I thought is worth sharing. The trick is\nquite old and you might already know about this, but when I started out with\nprogramming, it blew my mind.\n\nIn school, we get taught to use a temporary\nvariable to swap two numbers:\n\n```js\nlet a = 5;\nlet b = 10;\n\nlet temp = a;\n\na = b; // a = 10\nb = temp; // b = 5\n```\n\nBut by using some arithmetic, we can save us a few bytes of memory:\n\n```js\nlet a = 5;\nlet b = 10;\n\na = a + b; // a = 15 ; b = 10\nb = a - b; // a = 15 ; b = 5\na = a - b; // a = 10 ; b = 5\n```\n\nPlease **never** use this in any production code. The less we have to think\nabout a piece of code, the better it is. It's a fun thought experiment\nnevertheless!\n\n---\n\nThis is post 026 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Swapping two Numbers without Temporary Variables","date":"2022-03-24","tags":"note, programming, 100DaysToOffload"},"tags":["note","programming","100DaysToOffload"]},{"slug":"2021-12-21-usetoggle-react-hook","markdownBody":"\nHere's a useful react hook for situations where you have to keep track of the\nstate of a dialog, popup, etc.:\n\n```js\nimport { useState } from \"react\";\n\nexport default (value) => {\n\tconst [state, setState] = useState(value);\n\n\tconst setStateActive = () => {\n\t\tsetState(true);\n\t};\n\n\tconst setStateInactive = () => {\n\t\tsetState(false);\n\t};\n\n\treturn [state, setStateActive, setStateInactive];\n};\n```\n\nUsage:\n\n```js\nconst SomeComponent = () => {\n\tconst [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] =\n\t\tuseToggle(false);\n\n\treturn (\n\t\t<>\n\t\t\t<Button onClick={openDeleteDialog}>Open Delete Dialog</Button>\n\t\t\t<Dialog isOpen={isDeleteDialogOpen} onClose={closeDeleteDialog}></Dialog>\n\t\t</>\n\t);\n};\n```\n\nThis is post 021 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Quick tip! React useToggle Hook","date":"2021-12-21","tags":"javascript, react, quick-tip, 100DaysToOffload, web, programming"},"tags":["javascript","react","quick-tip","100DaysToOffload","web","programming"]},{"slug":"2021-10-04-server-side-caching-with-apollo-graphql","markdownBody":"\nI recently implemented server-side caching for one of our applications at work.\nThis guide tries to document that I've learned. It assumes that you are using\nan apollo server of version 3 or higher.\n\n### What is Server-Side Caching?\n\nThe point of server-side caching is to reduce the load of your database by\n“remembering” the results of a query for a certain period. If the exact same\nquery comes in again, that remembered result will be returned.\n\nCaching should be handled with care. You should never enable caching for your\nentire application. Instead, you should identify the bottlenecks and develop a\nstrategy to overcome them.\n\n### Enabling caching on the server\n\nThe Apollo Team has done a great job\n[documenting](https://www.apollographql.com/docs/apollo-server/performance/caching/)\nthe caching behavior of their server. To add caching to your existing\nApollo-Server, you first have to add the `responseCachePlugin` to your\nconfiguration as shown\n[here](https://www.apollographql.com/docs/apollo-server/performance/caching/#caching-with-responsecacheplugin-advanced):\n\n```js\nimport responseCachePlugin from \"apollo-server-plugin-response-cache\";\n\nconst server = new ApolloServer({\n\t// ...other options...\n\tplugins: [responseCachePlugin()],\n});\n```\n\nThen, you have to configure a cache backend. By default, Apollo Server will\nstore the caches in RAM, but I’d recommend [using\nRedis](https://www.apollographql.com/docs/apollo-server/data/data-sources/#using-memcachedredis-as-a-cache-storage-backend)\n(or Memcached, if you like), especially if your application is spread across\nmultiple instances of the same backend.\n\n```js\nconst { BaseRedisCache } = require(\"apollo-server-cache-redis\");\nconst Redis = require(\"ioredis\");\n\nconst server = new ApolloServer({\n\t// ...\n\tcache: new BaseRedisCache({\n\t\tplugins: [responseCachePlugin()],\n\t\tclient: new Redis({\n\t\t\thost: \"redis-server\",\n\t\t}),\n\t}),\n});\n```\n\n> Note that you have to use the ioredis library here. node_redis is deprecated\n> as of v2.6.0 of apollo-server-cache-redis.\n\nIf everything went well, your server should now know how to cache responses!\nThis alone won’t get you very far, since it doesn’t know what to cache.\n\n### Telling Apollo what to cache\n\nTo make a type cachable, you have to declare **cache hints**. These properties\ncan either be set in the\n[resolver](https://www.apollographql.com/docs/apollo-server/performance/caching/#in-your-resolvers-dynamic),\nor\n[statically](https://www.apollographql.com/docs/apollo-server/performance/caching/#in-your-schema-static)\nin the schema. To keep it simple, this guide will stick to the static method.\nFeel free to experiment with the dynamic approach though!\n\nTo enable cache hints, simply add the following directive to your schema (you\nonly have to do this once):\n\n```gql\nenum CacheControlScope {\n\tPUBLIC\n\tPRIVATE\n}\n\ndirective @cacheControl(\n\tmaxAge: Int\n\tscope: CacheControlScope\n\tinheritMaxAge: Boolean\n) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION\n```\n\nNow you can add the `@cacheControl` directive to every type that should be cached.\n\n```gql\n# This type will be cached for 30 seconds\ntype Post @cacheControl(maxAge: 30) {\n\tid: ID!\n\ttitle: String\n\tauthor: Author\n\tcomments: [Comment]\n}\n```\n\nFor security reasons, these conditions are [very\nstrict](https://www.apollographql.com/docs/apollo-server/performance/caching/#why-are-these-the-maxage-defaults):\n\n> Our philosophy behind Apollo Server caching is that a response should only be\n> considered cacheable if every part of that response opts in to being\n> cacheable.\n\nThis means that every type needs to explicitly decide how long it should be\ncached. According to this note, the example above actually won’t be cached at\nall!\n\nHaving to specify the `maxAge` of every type would be tedious, so the authors\nhave come up with the `inheritMaxAge` property, which allows the type to\ninherit the settings from its parent. So, in order to make our example\ncachable, we have to enable cache control for all its subfields, either by\nsetting the `maxAge` explicitly or by inheriting it from the parent:\n\n```gql\ntype Post @cacheControl(maxAge: 30) {\n\tid: ID!\n\ttitle: String\n\tauthor: Author\n\tcomments: [Comment]\n}\n\ntype Author @cacheControl(inheritMaxAge: true) {\n\tid: ID!\n\tname: String\n}\n\ntype Comment @cacheControl(inheritMaxAge: true) {\n\tid: ID!\n\tbody: String\n}\n```\n\nNow, whenever you query a `Post`, it will be thrown in the cache. If you query\nthe type again within 30 seconds, the query resolver won’t execute. Instead, it\nwill be read from the cache. Keep in mind that cache hints can also be set on\n`query` and `mutation` fields. This can be handy if you want to cache the\nentire response of a request.\n\n### Gotcha 1: Multiple Response Variations\n\nThe use-case where this topic first came up required us to have different\nresponses based on the type of the logged in user. An `Admin` should see a\ndifferent result than a `Visitor`. If you ignore this fact, it could be that a\nvisitor could see the cache result of a query previously executed by an admin!\n\nThis problem can be counteracted by setting extra information in the cache key\nvia `extraCacheKeyData` (see\n[this](https://www.apollographql.com/docs/apollo-server/performance/caching/#configuring-reads-and-writes)\nparagraph):\n\n```js\nplugins: [\n    responseCachePlugin({\n        extraCacheKeyData: (ctx) => (\n            ctx.context.auth.isAdmin\n        ),\n    }),\n],\n```\n\nThis example can create two distinct caches: One for users that are marked as\nadmins, and one for regular users.\n\n### Gotcha 2: User-specific caches\n\nBesides caching for a group of users, you can also cache responses [for every\nuser\nindividually](https://www.apollographql.com/docs/apollo-server/performance/caching/#identifying-users-for-private-responses).\nYou may have noticed that you can also set a `scope` field in the cache control\ndirective. This will only cache the response if a user is logged in:\n\n```gql\ntype Post {\n\tid: ID!\n\ttitle: String\n\tauthor: Author @cacheControl(maxAge: 10, scope: PRIVATE)\n}\n```\n\nApollo determines if a user is logged in or not, based on if the `sessionId`\nfunction has returned a value other than `null`.\n\n```js\nimport responseCachePlugin from \"apollo-server-plugin-response-cache\";\nconst server = new ApolloServer({\n\t// ...other settings...\n\tplugins: [\n\t\tresponseCachePlugin({\n\t\t\tsessionId: (requestContext) =>\n\t\t\t\trequestContext.request.http.headers.get(\"sessionid\") || null,\n\t\t}),\n\t],\n});\n```\n\nI’m unsure how effective this pattern is, since every user will receive its key\nin the cache. This kind of defeats the purpose of server-side caching, which is\nmeant to reduce load on the database. If you’re trying to cache fields for\nindividual users, you might also want to take a look at client-side caching via\n[apollo-augmented-hooks](https://github.com/appmotion/apollo-augmented-hooks).\n\nThis is post 020 of [#100DaysToOffload](https://100daystooffload.com/).\n","frontmatter":{"title":"Server-Side Caching with Apollo GraphQL","date":"2021-10-04","tags":"javascript, graphql, guide, 100DaysToOffload, programming"},"tags":["javascript","graphql","guide","100DaysToOffload","programming"]}]},"__N_SSG":true}