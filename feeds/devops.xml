<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Tue, 11 Jul 2023 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                Principles of DevOps: Introduction
            </title>
            <guid>
                https://garrit.xyz/posts/2023-07-11-principles-of-devops:-introduction
            </guid>
            <link>
                https://garrit.xyz/posts/2023-07-11-principles-of-devops:-introduction?utm_source=rss
            </link>
            <pubDate>
                Tue, 11 Jul 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I recently changed roles in my company, and I can officially call myself a &quot;DevOps Engineer&quot; now. But what does that really mean?</p>

<p>In an attempt to write down my thoughts about this topic, I&#39;m starting a series of blog posts called &quot;Principles of DevOps&quot;. I&#39;m usually very bad at sticking to things, so I&#39;m curious to see if this series will lead anywhere.</p>

<p>To collect the posts of this series, I created a tag called <a href="/posts?tags=PrinciplesOfDevOps">#PrinciplesOfDevOps</a>. If you&#39;re reading this in the future, be sure to check out this tag to see all installments.</p>

<h2>What is DevOps?</h2>

<p>Let&#39;s kick off the series with a very basic question: What on earth is DevOps?</p>

<p>DevOps is often as an inflationary term to describe &quot;whatever comes after dev&quot;. This can&#39;t be further from the truth.</p>

<p>In the past, developers, operations, designers, QA and other stakeholders of an applications were often implicitly trained to work in &quot;silos&quot;. Once designers have finished their job, they pass their mockups to developers. When developers are done writing the application, they pass their code to operations, whose job it is to deploy it.</p>

<p>DevOps is a set of practices that aims to combine the work of project stakeholders to unite people, process, and technology in application planning, development, delivery, and operations. Although the term DevOps only consists of &quot;Dev&quot; and &quot;Ops&quot;, it has since evolved to include design, quality assurance and security. You may have heard of &quot;DevSecOps&quot;, which aims to incorporate more roles into the term, but &quot;DevOps&quot; seems to stick the best with most people.</p>

<h2>What does a &quot;DevOps Engineer&quot; do?</h2>

<p>I recently wrote a blog post about this: <a href="/posts/2023-04-22-the-role-of-a-devops-engineer">The role of a DevOps Engineer</a>.</p>

<p>In short, the job of a DevOps Engineer is to reduce the friction between stakeholders of a project. A collegue of explained this in a really good way:</p>

<blockquote><p>A DevOps Engineer doesn&#39;t push the button, they enable the developers to push the button themselves.</p></blockquote>

<h2>Let&#39;s jump in!</h2>

<p>I hope by now you have a vague sense of what DevOps is. Next up, I want to uncover the principles and practices of DevOps. Thanks for reading to the end!</p>

<hr/>

<p>This is post 072 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Optimizing work batch size
            </title>
            <guid>
                https://garrit.xyz/posts/2023-05-19-work-batch-sizing
            </guid>
            <link>
                https://garrit.xyz/posts/2023-05-19-work-batch-sizing?utm_source=rss
            </link>
            <pubDate>
                Fri, 19 May 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I&#39;ve been playing 
<a href="https://en.m.wikipedia.org/wiki/Carcassonne_(board_game)">Carcassonne</a> a lot with my girlfriend recently. It&#39;s a boardgame about building cities, roads and farms, and each completed &quot;project&quot; earns you some amount of points. The twist is that there&#39;s only a limited number of tiles, and once all tiles are used, the game is over unfinished projects are discarded.</p>

<p>The first couple of playthroughs I tried to maximize my score by increasing the number of projects I actively had going. I&#39;d start a new city or road whenever I could, thinking that the multipliers you sometimes get would pay off in the end. Boy was I wrong.</p>

<p>Where I&#39;m from, we have multiple sayings for this approach. &quot;Having too many irons in the fire&quot; or &quot;dancing on too many parties&quot;. I was too busy starting new projects instead of making actual progress.</p>

<p>A far better approach is to finish projects early, earning less points, but with a greater certainty that they will pay off. With every project you start, the likelyhood of the other projects paying off decreases.</p>

<p>Keeping batch sizes small was a key concept of the <a href="https://en.m.wikipedia.org/wiki/Lean_manufacturing">lean manufacturing movement</a> in the 1980s, and has since been adopted by the <a href="https://de.m.wikipedia.org/wiki/DevOps">DevOps movement</a> for the IT industry. If you want to learn more about this topic, you should check out <a href="https://itrevolution.com/product/the-devops-handbook-second-edition/">The DevOps Handbook</a>. It goes well beyond the basics of making IT processes more productive and efficient.</p>

<p>After realizing that small batch sizes are the key to success, I haven&#39;t lost a game of Carcassonne since. I hope you&#39;re not reading this, honey.ðŸ¤­</p>

<hr/>

<p>This is post 068 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Serverless Framework Retrospective
            </title>
            <guid>
                https://garrit.xyz/posts/2023-04-28-serverless-framework-retrospective
            </guid>
            <link>
                https://garrit.xyz/posts/2023-04-28-serverless-framework-retrospective?utm_source=rss
            </link>
            <pubDate>
                Fri, 28 Apr 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>A current project requires the infrastructure to be highly scalable. It&#39;s expected that &gt; 50k Users hit the platform within a five minute period. Regular ECS containers take about one minute to scale up. That just won&#39;t cut it. I decided to go all in on the <a href="https://www.serverless.com/">serverless</a> framework on AWS. Here&#39;s how it went.</p>

<h3>Setup</h3>

<p>Setting up a serverless application was a breeze. You create a config file and use their CLI to deploy the app.</p>

<h3>The rest of the infrastructure</h3>

<p>I decided to define the rest of the infrastructure (VPC, DB, cache, ...) in Terraform. But, since I wasn&#39;t familiar with how the Serverless Framework worked, I struggled to draw the line between what serverless should handle vs. what the rest of the infrastructure (Terraform) should provide. In a more traditional deployment workflow, you might let the CI deploy a container image to ECR and point the ECS service to that new image.</p>

<p>I chose to let Serverless deploy the entire app through CI and build the rest of the infrastructure around it. The problem with this approach is that we lose fine-grained control over what&#39;s deployed where, which leads to a lot of permission errors.</p>

<p>In retrospect, I should&#39;ve probably chosen the location of the S3 archive as the deployment target for the CI, and then point the lambda function to the location of the new artifact. This defeats the purpose of the framework, but it gives you a lot more control over your infrastructure. Once the next project comes along, I&#39;ll probably go that route instead.</p>

<h3>Permissions</h3>

<p>Serverless suggests to use admin permissions for deployments, and I see where they&#39;re coming from. Managing permissions in this framework is an absolute mess. Here&#39;s what the average deployment workflow looks like, if you want to use fine grained permissions:</p>

<ol><li>Wait for CloudFormation to roll back changes (~2 minutes)</li><li>Update IAM role</li><li>Deploy Serverless App</li><li>If there&#39;s an error, go to 1</li></ol>

<p>Thankfully, some people have already gone through the process of figuring this out. <a href="https://serverlessfirst.com/create-iam-deployer-roles-serverless-app/#determining-deploy-time-permissions">Here&#39;s</a> a great guide with a starting point of the needed permissions.</p>

<h3>Conclusion</h3>

<p>Using the serverless framework is a solid choice if you just want to throw an app out there. Unfortunately the app I was deploying isn&#39;t &quot;just&quot; a dynamic website. The next time I&#39;m building a serverless application it&#39;s probably not going to be with the Serverless Framework, though I learned a lot about serverless applications in general.</p>

<hr/>

<p>This is post 067 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                The role of a DevOps Engineer
            </title>
            <guid>
                https://garrit.xyz/posts/2023-04-22-the-role-of-a-devops-engineer
            </guid>
            <link>
                https://garrit.xyz/posts/2023-04-22-the-role-of-a-devops-engineer?utm_source=rss
            </link>
            <pubDate>
                Sat, 22 Apr 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>The term &quot;DevOps&quot; can be interpreted in many different ways. It&#39;s often thrown around as a buzzword whenever somebody is talking about &quot;what comes after development&quot;. Obviously, it&#39;s not just that. Or is it? It depends on whom you&#39;re talking to.</p>

<p>Although I just recently started my new role as a &quot;DevOps Engineer&quot;, I&#39;m still discovering what that term means to me. I just had a fruitful conversation with the DevOps lead of a client, and they phrased this role in a very fitting way.</p>

<blockquote><p>A DevOps Engineer doesn&#39;t push the button, they enable the developers to push the button themselves.</p></blockquote>

<p>To me this role is fascinating, since it touches so many different aspects of software delivery.</p>

<hr/>

<p>This is post 065 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
    </channel>
</rss>