<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Wed, 08 Mar 2023 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                The fundamental difference between Terraform and Kubernetes
            </title>
            <link>
                https://garrit.xyz/posts/2023-03-08-terraform-and-kubernetes-are-fundamentally-different?utm_source=rss
            </link>
            <pubDate>
                Wed, 08 Mar 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>On the surface, Infrastructure as Code tools like <a href="https://www.terraform.io/">Terraform</a> or <a href="https://aws.amazon.com/de/cloudformation/">CloudFormation</a> may seem to behave similar to <a href="https://kubernetes.io/">Kubernetes</a> YAMLs, but they are in fact fundamentally different approaches to cloud infrastructure.</p>

<p>Terraform tries to provide a declarative way to express imperative actions. If you tell Terraform that you need an EC2 instance, it will notice that no such resource exists and instruct the AWS API to create one. If you don&#39;t need the instance anymore and remove the resource definition from your code, Terraform will also pick that up and instruct the AWS API to delete the instance. This works well in most cases, but every once in a while the declarative state may get out of sync with the real world, resulting in errors that are hard to debug and resolve.</p>

<p>Kubernetes on the other hand is a fully declarative system. In a <a href="/posts/2022-09-22-kubernetes-is-a-domain-specific-database">previous post</a> I touched on how Kubernetes constantly compares the <em>desired</em> state with the <em>actual</em> state of the resources and tries to match the two. Although it is theoretically possible to issue imperative actions, Kubernetes is built from the ground up to be declarative.</p>

<hr/>

<p>This is post 054 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Pods vs. Containers
            </title>
            <link>
                https://garrit.xyz/posts/2023-03-04-pods-vs.-containers?utm_source=rss
            </link>
            <pubDate>
                Sat, 04 Mar 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>In Kubernetes, pods and containers are often confused. I found a <a href="https://iximiuz.com/en/posts/containers-vs-pods/">great article</a> going over the differences of the two terms.</p>

<blockquote><p>Containers and Pods are alike. Under the hood, they heavily rely on Linux namespaces and cgroups. However, Pods aren&#39;t just groups of containers. A Pod is a self-sufficient higher-level construct. All pod&#39;s containers run on the same machine (cluster node), their lifecycle is synchronized, and mutual isolation is weakened to simplify the inter-container communication. This makes Pods much closer to traditional VMs, <a href="https://www.mirantis.com/blog/multi-container-pods-and-container-communication-in-kubernetes/">bringing back the familiar deployment patterns like sidecar or reverse proxy</a>.</p></blockquote>

<p>In my own words: Containers are made up of Linux namespaces and cgroups. Pods can be thought of as a cgroup of cgroups (though not really), mimicing the behavior of a virtual machine that runs multiple containers with a synchronized lifecycle. The containers in a pod are losely isolated, making it easy to communicate between each other. Containers in a pod can however set individual resource requests, enabled by Linux namespaces.</p>

<p>I&#39;d highly encourage you to check out <a href="https://iximiuz.com/en/posts/containers-vs-pods/">the original article</a> if you want to learn more about this topic.</p>

<hr/>

<p>This is post 053 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                What's next for modern infrastructure?
            </title>
            <link>
                https://garrit.xyz/posts/2023-02-21-what's-next-for-modern-infrastructure?utm_source=rss
            </link>
            <pubDate>
                Tue, 21 Feb 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Modern infrastructure is incredibly complex. I identified 4 main &quot;levels&quot; of infrastructure abstraction:</p>

<h2>Level 1: A website on a server</h2>

<p>This is the most straight forward way to host a website. A webserver hosted on bare metal or a VM.</p>

<h2>Level 2: Multiple servers behind a load balancer</h2>

<p>At this stage, you start treating servers as cattle rather than pets. Servers may be spun up and down at will without influencing the availability of the application.</p>

<h2>Level 3: An orchestrated cluster of servers</h2>

<p>Instead of a server serving a specific purpose (e.g. webserver, DB server, etc.), a server becomes a worker for arbitrary workloads (see Kubernetes, ECS).</p>

<h2>Level 4: Multicluster service mesh</h2>

<p>If an organization manages multiple clusters (e.g. multiple application teams), they can be tied together into a <a href="https://istio.io/latest/docs/reference/glossary/#service-mesh">service mesh</a> to better optimize communication and observability.</p>

<h2>Level 5: ???</h2>

<p>History shows that we never stop abstracting. Multicluster service meshes are about the most abstract concept many people (including myself) can comprehend, but I doubt that this is the end of this journey. So, what&#39;s next for modern infrastructure?</p>

<p>This is post 049 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                What problem does Kubernetes solve?
            </title>
            <link>
                https://garrit.xyz/posts/2023-02-20-what-problem-does-kubernetes-solve?utm_source=rss
            </link>
            <pubDate>
                Mon, 20 Feb 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>This is a common question that many people (including me) ask themselves.</p>

<p>I recently came across a great <a href="https://blog.adamchalmers.com/kubernetes-problems/">post</a> which explains the problem really well:</p>

<blockquote><p>Kubernetes exists to solve one problem: how do I run m containers across n servers?</p></blockquote>

<p>The post also nails the answer to <strong>how</strong> Kubernetes solves this problem:</p>

<blockquote><p>It&#39;s a big abstract virtual computer, with its own virtual IP stack, networks, disk, RAM and CPU. It lets you deploy containers as if you were deploying them on one machine that didn&#39;t run anything else. Clusters abstract over the various physical machines that run the cluster.</p></blockquote>

<p>I&#39;d highly encourage you to read through the article if you want to learn more about why Kubernetes exists.</p>

<p>This is post 048 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Reselling Kubernetes
            </title>
            <link>
                https://garrit.xyz/posts/2022-11-03-reselling-managed-kubernetes?utm_source=rss
            </link>
            <pubDate>
                Thu, 03 Nov 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I&#39;m currently working on a side project involving reselling Kubernetes clusters.
What I discovered is that it&#39;s impossible to resell <em>managed</em> Kubernetes, as in
<a href="https://aws.amazon.com/de/eks/">EKS</a> and
<a href="https://cloud.google.com/kubernetes-engine/">GKE</a>.</p>

<p>The only possible scenario where reselling Kubernetes to your and the
end-customers advantage is to manage the nodes yourself. The reason is the
scaling of cost per CPU.</p>

<p>When renting VMs, the price per CPU often varies for the size of the machine. 
This leaves the reseller flexibility in the choice of resources. To give you an
example, here is the pricing for virtual machines at
<a href="https://www.hetzner.com/">Hetzner</a>, and the price per CPU:</p>

<p>| Product         | Number of vCPUs    | Price (in €/month) | Price per vCPU (in €/month) |
|-----------------|--------------------|--------------------|-----------------------------|
| CX11            | 1                  | 4.51               | 4.51                        |
| CPX11           | 2                  | 5.18               | 2.59                        |
| CPX21           | 3                  | 8.98               | 2.99                        |
| CPX31           | 4                  | 16.18              | 4.05                        |
| CPX41           | 8                  | 29.99              | 3.75                        |
| CPX51           | 16                 | 65.33              | 4.08                        |</p>

<p>When comparing this to a managed Kubernetes product like
<a href="https://www.civo.com">CIVO</a>, we see that the price per CPU stays constant:</p>

<p>| Product         | Number of vCPUs    | Price (in €/month) | Price per vCPU (in €/month) |
|-----------------|--------------------|--------------------|-----------------------------|
| Extra Small     | 1                  | 5                  | 5                           |
| Small           | 2                  | 10                 | 5                           |
| Medium          | 4                  | 20                 | 5                           |
| Large           | 8                  | 40                 | 5                           |</p>

<p>This pricing model is nice and predictable for the customer, but it makes it
impossible to justify a resell product. If CIVO charges 5€/month per vCPU, we
would need to charge extra to be profitable, which in turn overcuts the
competition.</p>

<p>When choosing Hetzner (or any other platform offering VMs), we are still able to
undercut the competition and even optimize how the resources are laid out on
the nodes. The obvious downside of course being that we have to manage the
clusters ourselves.</p>

<h2>Share your thoughts</h2>

<p>Reselling Kubernetes is tricky. I&#39;m currently sketching out ideas for an
alternative way to sell Kubernetes hosting at an ultra cheap price. The project
is still in its infancy but if you&#39;re interested, you&#39;re more than welcome to
share your thoughts in our <a href="https://matrix.to/#/!cTXkqtlnbHScIxnlqO:matrix.org?via=matrix.org&amp;via=envs.net">Matrix
Room</a>!</p>

<p>This is post 041 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Kubernetes is a domain specific database
            </title>
            <link>
                https://garrit.xyz/posts/2022-09-22-kubernetes-is-a-domain-specific-database?utm_source=rss
            </link>
            <pubDate>
                Thu, 22 Sep 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just finished listening to <a href="https://kubernetespodcast.com/episode/129-linkerd/">an
episode</a> of the Kubernetes
podcast. In it, <a href="https://saunter.org/">Thomas Rampelberg</a> makes an analogy that
I think is worth sharing:</p>

<blockquote><p>&quot;[...] Kubernetes is really a domain-specific database. And you need to look at it
that way. The YAML is literally writing a select statement or an insert
statement for a database. That&#39;s what the YAML is. And it&#39;s awesome that it is
already configured for how it is. And it&#39;s awesome that it&#39;s got a schema. But
the YAML is you writing an insert statement into Kubernetes. [...]&quot;</p></blockquote>

<p>The Kubernetes API abstracts two types of states: desired state and actual
state. Whenever you apply a manifest, you update the <em>desired state</em> of the
cluster, just like you do in a regular, non domain-specific database like
PostgreSQL or Redis. Kubernetes then frequently compares the desired state with
the <em>actual</em> state of the cluster. If they don&#39;t match, Kubernetes will do
whatever it does to match these two states. Usually, this data is persisted
using a key-value database like <a href="https://etcd.io/">etcd</a> running in a cluster,
though one could theoretically also hook up an external MySQL or Postgres
database for this purpose.</p>

<p>I found this great diagram by <a href="https://downey.io/blog/desired-state-vs-actual-state-in-kubernetes/">Tim
Downey</a>,
showing an oversimplified analogy of this pattern:</p>

<p>![Thermostat
Example](/assets/posts/2022-09-22-kubernetes-is-a-domain-specific-database/desired-state-hvac-diagram.png)</p>

<p>You <em>insert</em> your desired state into the system, and the system adjusts the
actual state to match the desired state. In the case of thermostats the state is
a temperature. In Kubernetes, it&#39;s <a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/">resource
objects</a></p>

<p>This is post 037 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
    </channel>
</rss>