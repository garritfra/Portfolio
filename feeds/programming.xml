<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Fri, 30 Sep 2022 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                Debugging Docker images
            </title>
            <link>
                https://garrit.xyz/posts/2022-09-30-debugging-docker-images?utm_source=rss
            </link>
            <pubDate>
                Fri, 30 Sep 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Docker builds images incrementally. Every line in a Dockerfile will generate a
new image that builds on top of the last one. This can be really handy if
something is not right in your build.</p>

<p>Since version 18.09 Docker has added a new backend for building images,
<a href="https://github.com/moby/buildkit#buildkit">buildkit</a>. Unfortunately, buildkit
does not let you view the IDs of the intermediate containers it uses under the
hood. To work around that, you can opt out of buildkit by running a build with
buildkit disabled:</p>

<p><code>sh
DOCKER_BUILDKIT=0 docker build --pull --rm -t myproject:latest .
</code></p>

<p>You should now see the IDs of the intermediate containers:</p>

<p><code>sh
Sending build context to Docker daemon  87.84MB
Step 1/16 : FROM node:16.15.1-alpine3.16 AS development
16.15.1-alpine3.16: Pulling from library/node
Digest: sha256:c785e617c8d7015190c0d41af52cc69be8a16e3d9eb7cb21f0bb58bcfca14d6b
Status: Image is up to date for node:16.15.1-alpine3.16
 ---&gt; e548f8c9983f
Step 2/16 : WORKDIR /usr/src/app
 ---&gt; Using cache
 ---&gt; 34e5c9bdb910
Step 3/16 : COPY package*.json ./
 ---&gt; Using cache
 ---&gt; 626e4ae998fc
Step 4/16 : RUN npm install glob rimraf
 ---&gt; Using cache
 ---&gt; 2d036b8354e0
Step 5/16 : RUN npm install
 ---&gt; Using cache
 ---&gt; 948709b4957f      &lt;-- HERE
Step 6/16 : COPY . .
...
</code></p>

<p>As mentioned, these IDs are valid docker images, so you can just launch them
and attach a shell like every other image:</p>

<p><code>sh
docker run -ti --rm 948709b4957f
</code></p>

<p>If you&#39;re not seeing a regular shell, but a Node.js REPL for example, this
might be because the <code>ENTRYPOINT</code> of that image was set to the binary of that
REPL. To work around that, you can override the entrypoint:</p>

<p><code>sh
docker run -ti --rm --entrypoint=/bin/sh 948709b4957f
</code></p>

<h2>When is this helpful?</h2>

<p>If your build fails at a particular step, you can attach a shell to the <strong>last
working</strong> step, inspect the filesystem, and execute the failing command manually.</p>

<p>That&#39;s all!</p>

<p>This is post 039 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                The only true answer to 'tabs vs spaces'
            </title>
            <link>
                https://garrit.xyz/posts/2022-06-29-the-only-true-answer-to-tabs-vs-spaces?utm_source=rss
            </link>
            <pubDate>
                Wed, 29 Jun 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I recently dove into a new project at work. We&#39;re starting from a blank page,
so of course this classic question came up:</p>

<blockquote><p>&quot;So should we use tabs or spaces for our formatting?&quot;</p></blockquote>

<p>One of my teammates explained to us why the only logical answer to this is
&quot;Tabs&quot;, and you&#39;ll soon know why.</p>

<h2>The problem</h2>

<p>Most formatters, by default, use either two or four spaces for indentation by
default. The <a href="https://prettier.io/">Prettier</a> formatter does this, and it
somewhat became the norm for JavaScript projects. This has one huge downside
though: everyone on the team has to agree, or live with this standard.</p>

<p>Nowadays, almost all editors come with the ability to change the preferred
indentation settings, which will be overridden by the settings of the
formatter. I prefer an indentation of 4 spaces, which is reflected in all of my
code. If I&#39;m working on a project that uses an indentation of 2 spaces via
prettier, my preference will be overridden when formatting the code.</p>

<h2>Just use tabs</h2>

<p>The solution to this problem is simple: Create a <code>.editorconfig</code> file and set
the indentation style to tab, without a width:</p>

<p><code></code>`editorconfig
root = true</p>

<p>[*]
end<em>of</em>line = lf
charset = utf-8
indent_style = tab
<code></code>`</p>

<p>Almost all editors will be able to pick this file up and configure some
project-wide settings. If your editor is configured to use a indent width of 4,
this setting will be respected. If you&#39;re a maniac that indents their code with
8 spaces, you&#39;ll be pleased to see that you can finally use this style in your
code, without forcing anyone else to do as you do.</p>

<p>Even GitHub, GitLab and friends are able to respect this setting, giving
everyone the opportunity to view code in their preferred style.</p>

<p>I hope you now know why using a single tab of indentation makes the most sense if
you&#39;re working in a team. Let me know your thoughts!</p>

<p>This is post 035 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Swapping two Numbers without Temporary Variables
            </title>
            <link>
                https://garrit.xyz/posts/2022-03-24-swapping-numbers-without-temp?utm_source=rss
            </link>
            <pubDate>
                Thu, 24 Mar 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Ever wondered how to swap two numbers without using a temporary variable?</p>

<p>I just found this very old note that I thought is worth sharing. The trick is
quite old and you might already know about this, but when I started out with
programming, it blew my mind.</p>

<p>In school, we get taught to use a temporary
variable to swap two numbers:</p>

<p><code></code>`js
let a = 5;
let b = 10;</p>

<p>let temp = a;</p>

<p>a = b; // a = 10
b = temp; // b = 5
<code></code>`</p>

<p>But by using some arithmetic, we can save us a few bytes of memory:</p>

<p><code></code>`js
let a = 5;
let b = 10;</p>

<p>a = a + b; // a = 15 ; b = 10
b = a - b; // a = 15 ; b = 5
a = a - b; // a = 10 ; b = 5
<code></code>`</p>

<p>Please <strong>never</strong> use this in any production code. The less we have to think
about a piece of code, the better it is. It&#39;s a fun thought experiment
nevertheless!</p>

<hr/>

<p>This is post 026 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Quick tip! React useToggle Hook
            </title>
            <link>
                https://garrit.xyz/posts/2021-12-21-usetoggle-react-hook?utm_source=rss
            </link>
            <pubDate>
                Tue, 21 Dec 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Here&#39;s a useful react hook for situations where you have to keep track of the
state of a dialog, popup, etc.:</p>

<p><code></code>`js
import { useState } from &quot;react&quot;;</p>

<p>export default (value) =&gt; {
	const [state, setState] = useState(value);</p>

<pre><code>const setStateActive = () =&gt; {
	setState(true);
};

const setStateInactive = () =&gt; {
	setState(false);
};

return [state, setStateActive, setStateInactive];</code></pre>

<p>};
<code></code>`</p>

<p>Usage:</p>

<p><code></code>`js
const SomeComponent = () =&gt; {
	const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] =
		useToggle(false);</p>

<pre><code>return (
	&lt;&gt;
		&lt;Button onClick={openDeleteDialog}&gt;Open Delete Dialog&lt;/Button&gt;
		&lt;Dialog isOpen={isDeleteDialogOpen} onClose={closeDeleteDialog}&gt;&lt;/Dialog&gt;
	&lt;/&gt;
);</code></pre>

<p>};
<code></code>`</p>

<p>This is post 021 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Server-Side Caching with Apollo GraphQL
            </title>
            <link>
                https://garrit.xyz/posts/2021-10-04-server-side-caching-with-apollo-graphql?utm_source=rss
            </link>
            <pubDate>
                Mon, 04 Oct 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I recently implemented server-side caching for one of our applications at work.
This guide tries to document that I&#39;ve learned. It assumes that you are using
an apollo server of version 3 or higher.</p>

<h3>What is Server-Side Caching?</h3>

<p>The point of server-side caching is to reduce the load of your database by
“remembering” the results of a query for a certain period. If the exact same
query comes in again, that remembered result will be returned.</p>

<p>Caching should be handled with care. You should never enable caching for your
entire application. Instead, you should identify the bottlenecks and develop a
strategy to overcome them.</p>

<h3>Enabling caching on the server</h3>

<p>The Apollo Team has done a great job
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/">documenting</a>
the caching behavior of their server. To add caching to your existing
Apollo-Server, you first have to add the <code>responseCachePlugin</code> to your
configuration as shown
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#caching-with-responsecacheplugin-advanced">here</a>:</p>

<p><code></code>`js
import responseCachePlugin from &quot;apollo-server-plugin-response-cache&quot;;</p>

<p>const server = new ApolloServer({
	// ...other options...
	plugins: [responseCachePlugin()],
});
<code></code>`</p>

<p>Then, you have to configure a cache backend. By default, Apollo Server will
store the caches in RAM, but I’d recommend <a href="https://www.apollographql.com/docs/apollo-server/data/data-sources/#using-memcachedredis-as-a-cache-storage-backend">using
Redis</a>
(or Memcached, if you like), especially if your application is spread across
multiple instances of the same backend.</p>

<p><code></code>`js
const { BaseRedisCache } = require(&quot;apollo-server-cache-redis&quot;);
const Redis = require(&quot;ioredis&quot;);</p>

<p>const server = new ApolloServer({
	// ...
	cache: new BaseRedisCache({
		plugins: [responseCachePlugin()],
		client: new Redis({
			host: &quot;redis-server&quot;,
		}),
	}),
});
<code></code>`</p>

<blockquote><p>Note that you have to use the ioredis library here. node_redis is deprecated
as of v2.6.0 of apollo-server-cache-redis.</p></blockquote>

<p>If everything went well, your server should now know how to cache responses!
This alone won’t get you very far, since it doesn’t know what to cache.</p>

<h3>Telling Apollo what to cache</h3>

<p>To make a type cachable, you have to declare <strong>cache hints</strong>. These properties
can either be set in the
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#in-your-resolvers-dynamic">resolver</a>,
or
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#in-your-schema-static">statically</a>
in the schema. To keep it simple, this guide will stick to the static method.
Feel free to experiment with the dynamic approach though!</p>

<p>To enable cache hints, simply add the following directive to your schema (you
only have to do this once):</p>

<p><code></code>`gql
enum CacheControlScope {
	PUBLIC
	PRIVATE
}</p>

<p>directive @cacheControl(
	maxAge: Int
	scope: CacheControlScope
	inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION
<code></code>`</p>

<p>Now you can add the <code>@cacheControl</code> directive to every type that should be cached.</p>

<p><code></code>`gql</p>

<h1>This type will be cached for 30 seconds</h1>

<p>type Post @cacheControl(maxAge: 30) {
	id: ID!
	title: String
	author: Author
	comments: [Comment]
}
<code></code>`</p>

<p>For security reasons, these conditions are <a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#why-are-these-the-maxage-defaults">very
strict</a>:</p>

<blockquote><p>Our philosophy behind Apollo Server caching is that a response should only be
considered cacheable if every part of that response opts in to being
cacheable.</p></blockquote>

<p>This means that every type needs to explicitly decide how long it should be
cached. According to this note, the example above actually won’t be cached at
all!</p>

<p>Having to specify the <code>maxAge</code> of every type would be tedious, so the authors
have come up with the <code>inheritMaxAge</code> property, which allows the type to
inherit the settings from its parent. So, in order to make our example
cachable, we have to enable cache control for all its subfields, either by
setting the <code>maxAge</code> explicitly or by inheriting it from the parent:</p>

<p><code></code>`gql
type Post @cacheControl(maxAge: 30) {
	id: ID!
	title: String
	author: Author
	comments: [Comment]
}</p>

<p>type Author @cacheControl(inheritMaxAge: true) {
	id: ID!
	name: String
}</p>

<p>type Comment @cacheControl(inheritMaxAge: true) {
	id: ID!
	body: String
}
<code></code>`</p>

<p>Now, whenever you query a <code>Post</code>, it will be thrown in the cache. If you query
the type again within 30 seconds, the query resolver won’t execute. Instead, it
will be read from the cache. Keep in mind that cache hints can also be set on
<code>query</code> and <code>mutation</code> fields. This can be handy if you want to cache the
entire response of a request.</p>

<h3>Gotcha 1: Multiple Response Variations</h3>

<p>The use-case where this topic first came up required us to have different
responses based on the type of the logged in user. An <code>Admin</code> should see a
different result than a <code>Visitor</code>. If you ignore this fact, it could be that a
visitor could see the cache result of a query previously executed by an admin!</p>

<p>This problem can be counteracted by setting extra information in the cache key
via <code>extraCacheKeyData</code> (see
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#configuring-reads-and-writes">this</a>
paragraph):</p>

<p><code>js
plugins: [
    responseCachePlugin({
        extraCacheKeyData: (ctx) =&gt; (
            ctx.context.auth.isAdmin
        ),
    }),
],
</code></p>

<p>This example can create two distinct caches: One for users that are marked as
admins, and one for regular users.</p>

<h3>Gotcha 2: User-specific caches</h3>

<p>Besides caching for a group of users, you can also cache responses <a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#identifying-users-for-private-responses">for every
user
individually</a>.
You may have noticed that you can also set a <code>scope</code> field in the cache control
directive. This will only cache the response if a user is logged in:</p>

<p><code>gql
type Post {
	id: ID!
	title: String
	author: Author @cacheControl(maxAge: 10, scope: PRIVATE)
}
</code></p>

<p>Apollo determines if a user is logged in or not, based on if the <code>sessionId</code>
function has returned a value other than <code>null</code>.</p>

<p><code>js
import responseCachePlugin from &quot;apollo-server-plugin-response-cache&quot;;
const server = new ApolloServer({
	// ...other settings...
	plugins: [
		responseCachePlugin({
			sessionId: (requestContext) =&gt;
				requestContext.request.http.headers.get(&quot;sessionid&quot;) || null,
		}),
	],
});
</code></p>

<p>I’m unsure how effective this pattern is, since every user will receive its key
in the cache. This kind of defeats the purpose of server-side caching, which is
meant to reduce load on the database. If you’re trying to cache fields for
individual users, you might also want to take a look at client-side caching via
<a href="https://github.com/appmotion/apollo-augmented-hooks">apollo-augmented-hooks</a>.</p>

<p>This is post 020 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Flutter Web - the Good, the Bad and the Ugly
            </title>
            <link>
                https://garrit.xyz/posts/2021-02-17-notes-on-flutter-web?utm_source=rss
            </link>
            <pubDate>
                Wed, 17 Feb 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>These are some notes I took for the evaluation of Flutter web for a potential project at work. I decided to build a frontend for <a href="https://miniflux.app/">Miniflux</a>, since I figured it may enclose many pitfalls an application could potentially have. You can find the current prototype <a href="https://github.com/garritfra/FlutterFlux">here</a>.</p>

<h2>The Good</h2>

<ul><li><p><strong>Trivial to set up</strong>: Running a Flutter application in a browser, no matter if it is an existing app or a fresh project, can be done by simply specifying the -d chrome flag.</p></li><li><p><strong>Same behavior compared to mobile app</strong>: Since the app is quite literally a mobile application running in the browser, the page looks and feels like a mobile application. It gives the app a consistent look and feel across all devices. I can imagine this coming in handy for web applications that are primarily used on phones and tablets.</p></li><li><p><strong>Browser API integration</strong>: It seems like many of the libraries make use of Web APIs. For example: I was able to get location updates using the location package, and store data using <a href="https://pub.dev/packages/localstorage">localstorage</a>. Whether the Web target is supported, is noted as a flag in the package documentation.</p></li><li><p><strong>Alternative Backends</strong>: There are two <a href="https://flutter.dev/docs/development/tools/web-renderers">rendering backends</a>, both with its own benefits and drawbacks. The HTML renderer optimizes the page for the browser, which improves performance at the cost of consistency. The CanvasKit renderer renders WebGL using WebAssembly. This gives a consistent look and feel across all devices, at the cost of Performance and download size. If auto is specified, the renderer will be determined based on the device type. Here’s a comparison of the same app rendered with both backends:</p></li></ul>

<p>|                    HTML                    |                    CanvasKit                    |
| :----------------------------------------: | :---------------------------------------------: |
| <img alt="" src="/assets/flutter_web_renderer_html.png"/> | <img alt="" src="/assets/flutter_web_renderer_canvaskit.png"/> |</p>

<h2>The Bad</h2>

<ul><li><p><strong>Still in Beta</strong>: Flutter web requires the developer to use the beta channel of Flutter. I didn’t encounter any issues, but it could be that some features are unstable.</p></li><li><p><strong>No native HTML (With an exception)</strong>: Flutter Web renders the application into its own container, which is not using semantic HTML. The resulting application is also not debuggable using standard web-dev tools, but flutters debugging features can be used. There is a workaround though. Using the <a href="https://pub.dev/packages/easy_web_view">easy<em>web</em>view</a> package, I was able to embed html components as flutter widgets. The embedded code is actual HTML code that the browser itself is rendering, not Flutter. This solution is cross-platform, meaning that it also works flawlessly for mobile builds of the application. This might come in handy if the project demands to embed a javascript component like a video player. This approach could technically also improve SEO, but I’m unsure how a full-blown application only using this approach would behave.</p></li></ul>

<h2>The Ugly</h2>

<ul><li><p><strong>Scrolling feels sluggish</strong>: The scrolling behavior is implemented by flutter itself and does not feel as smooth as the native scrolling behavior of modern browsers.</p></li><li><p><strong>SEO nearly impossible</strong>: Since the application is a SPA and it is not using semantic HTML, it’s very difficult to do any kind of SEO. Lighthouse rated the demo application with a perfect 100 for SEO, but this is probably because it is only aware of the html that surrounds the flutter container. I didn’t find a way to Inject Metatags on a per-site basis.</p></li><li><p><strong>Heavy and slow on old devices</strong>: Even a basic application like the Todo app is very heavy and slow when compared to a “regular” website.</p></li></ul>

<h2>Conclusion</h2>

<p>Flutter Web seems to be a viable candidate to build truly cross-platform applications. Adding Web as a target for existing Flutter mobile apps should be relatively easy. The layout will probably need to be optimized to get the full experience. Native Web APIs seem to be well supported and documented.</p>

<p>The resulting web application is a PWA running inside a container. It is relatively heavy and requires much more resources to run, when compared to a “regular” web application.</p>

<p>I hope you found this useful!</p>

<p>This is post 012 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Notes about BEM (Block Element Modifier)
            </title>
            <link>
                https://garrit.xyz/posts/2021-02-02-bem-methodology?utm_source=rss
            </link>
            <pubDate>
                Tue, 02 Feb 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>In the coming weeks, months and years, I will be working on frontend-development as part of my dayjob. These are some personal notes I took during my research about the BEM methodology. If you want to read the official introduction, you should visit <a href="http://getbem.com/">their website</a>.</p>

<h1>Overview - What is BEM?</h1>

<p>BEM — Block Element Modifier is a methodology that helps you to create reusable components and code sharing in front-end development. It aims to group css-classes in a meaningful way, making it easier to understand</p>

<ol><li>where this class is used</li><li>what it describes and</li><li>what state the element is in.</li></ol>

<p>The BEM-notation is divided into three main parts: Blocks, Elements and Modifiers.</p>

<h2>Blocks</h2>

<p>A standalone entity that is meaningful on its own. Some examples might be <strong>headers, containers, menus, inputs, checkboxes</strong>, etc.</p>

<h2>Elements</h2>

<p>A part of a block that has no standalone meaning and is semantically tied to its block. This could be a <strong>menu item or an input placeholder</strong>.</p>

<h2>Modifiers</h2>

<p>A flag on a block or an element. Used to change appearance or behavior. This might be <strong>disabled, checked, fixed, big</strong>, etc.</p>

<h1>Putting it together</h1>

<p>A block itself is referenced though its name.</p>

<p><code>css
.button {
}
</code></p>

<p>To reference elements inside of the block, you add it to the block element with two underscores (<code>__</code>):</p>

<p><code>css
.button {
}
.button__text {
}
</code></p>

<p>If you want to add a modifier to a block or an element, you separate it with two dashes (<code>--</code>):</p>

<p><code>css
.button {
}
.button--disabled {
}
.button__text--inverted {
}
</code></p>

<h1>Benefits of BEM</h1>

<p><strong>Modularity</strong>: Block styles never depend on one another. They can easily be moved to other parts of the app.</p>

<p><strong>Reusability</strong>: Composing styles in a meaningful way reduces the amount of code duplication.</p>

<p><strong>Structure</strong>: BEM gives your code a solid structure that is both easy to understand and to expand.</p>

<h1>References</h1>

<ul><li>http://getbem.com/</li><li>https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/</li></ul>

<p>This is post 009 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Booleans are wasted memory
            </title>
            <link>
                https://garrit.xyz/posts/2020-11-17-booleans-are-wasted-memory?utm_source=rss
            </link>
            <pubDate>
                Tue, 17 Nov 2020 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>A boolean is either <code>true</code> or <code>false</code>. That translates to <code>1</code> or <code>0</code>. If you think that one bit is enough to store this information, you&#39;d be wrong.</p>

<p>In order to keep the binary layout of a program simple and convenient, most languages store information in 8 bit (1 byte) blocks.
If you allocate a <code>bool</code> in Rust or (most) other languages that are based on LLVM, <a href="https://llvm.org/docs/LangRef.html#simple-constants">it will take up 1 <code>i1</code>, or 1 byte of memory</a>. If you allocate a boolean value in C, you will get <a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/stdbool.h.html">an integer constant with a value of either 1 or 0</a>.</p>

<p>If you find yourself having to store multiple boolean states somewhere, you might simply declare those booleans and call it a day:</p>

<p><code></code>`c</p>

<h1>include &lt;stdbool.h&gt;</h1>

<h1>include &lt;stdio.h&gt;</h1>

<p>int main()
{
    bool can<em>read = true;
    bool can</em>write = true;
    bool can_execute = false;</p>

<pre><code>if (can_read)
    printf(&quot;read bit set\n&quot;);
if (can_write)
    printf(&quot;write bit set\n&quot;);
if (can_execute)
    printf(&quot;execute bit set\n&quot;);

// Output:
// read bit set
// write bit set</code></pre>

<p>}
<code></code>`</p>

<h2>We can do better than this</h2>

<p>An alternative approach to store boolean values is to share a &quot;chunk&quot; of bits with other values. This is usually done using bitwise operations:</p>

<p><code></code>`c</p>

<h1>include &lt;stdbool.h&gt;</h1>

<h1>include &lt;stdio.h&gt;</h1>

<p>// Define permissions</p>

<h1>define PERM_NONE       0b000</h1>

<h1>define PERM_READ       0b001</h1>

<h1>define PERM_WRITE      0b010</h1>

<h1>define PERM_EXECUTE    0b100</h1>

<h1>define PERM<em>ALL        PERM</em>READ | PERM<em>WRITE | PERM</em>EXECUTE</h1>

<p>int main()
{
    // Allocate 1 byte for permissions
    char permissions = PERM<em>READ | PERM</em>WRITE;</p>

<pre><code>if (permissions &amp; PERM_READ)
    printf(&quot;write bit set\n&quot;);
if (permissions &amp; PERM_WRITE)
    printf(&quot;read bit set\n&quot;);
if (permissions &amp; PERM_EXECUTE)
    printf(&quot;execute bit set\n&quot;);

// Output:
// read bit set
// write bit set</code></pre>

<p>}
<code></code>`</p>

<p>This example still wastes 5 bits since we only use 3 out of 8 possible bits of the char type, but I&#39;m sure you get the point. Allocating 3 boolean values independently would waste 7 * 3 = 21 bits, so it&#39;s a massive improvement. Whenever you find yourself needing multiple boolean values, think twice if you can use this pattern.</p>

<p>Microcontrollers have a very constrainted environment, therefore bitwise operations are essential in those scenarios. 7 wasted bits are a lot if there are only 4 kb of total memory available. For larger systems we often forget about these constraints, until they add up.</p>

<h2>My Plea</h2>

<ul><li>Be mindful about the software you create.</li><li>Appreciate the resources at your disposal.</li></ul>]]>
            </description>
        </item>
        <item>
            <title>
                The Patch-Based Git Workflow
            </title>
            <link>
                https://garrit.xyz/posts/patch-based-git-workflow?utm_source=rss
            </link>
            <pubDate>
                Mon, 28 Sep 2020 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>If you have ever contributed to an open source project, chances are you have opened a pull request on GitHub or a similar platform to present your code to the maintainers. While this is a very approachable way of getting your code reviewed, some projects have decided against using pull requests and instead accept patches via email.</p>

<h2>An introduction to patches</h2>

<p>A patch is essentially a git commit expressed in plain text. It describes what commit the change is based on, and what has changed. A basic patch looks like this:</p>

<p><code></code>`
From 92132241233033a123c4fa833449d6a0d550219c Mon Sep 17 00:00:00 2001
From: Bob <a href="mailto:bob@example.com">bob@example.com</a>
Date: Tue, 25 May 2009 15:42:16 +0200
Subject: [PATCH 1/2] first change</p>

<hr/>

<p> test.txt |    1 +-
 1 files changed, 1 insertions(+), 1 deletions(-)</p>

<p>diff --git a/test.txt b/test.txt
index 7634da4..270eb95 100644
--- a/test.txt
+++ b/test.txt
@@ -1 +1 @@
-Hallo Bob
+Hallo Alice!
<code></code>`</p>

<p>As you can see, it is very readable for both the reviewer and the machine.</p>

<h2>Sending and receiving patches</h2>

<p>The easiest way you can generate a patch from a commit is to use <code>git-format-patch</code>:</p>

<p><code>
git format-patch HEAD^
</code></p>

<p>This will generate a <code>.patch</code> file, that can be embedded into an email and sent to the maintainers. Oftentimes they will then reply to your mail with some inline comments about your code.</p>

<p>To simplify this process further, git has the <code>send-email</code> command, which let&#39;s you send the patch directly to someone without needing to embed it manually. I won&#39;t go into details about this, but there is a <a href="https://git-send-email.io/">well written guide</a> on how to set it up.</p>

<p>If you have received a patch from someone, you can apply it to your tree with the <code>am</code> (apply mail) command:</p>

<p><code>
git am &lt; 0001-first-change.patch
</code></p>

<p>check your <code>git log</code> to see the patch in form of the latest commit.</p>

<h2>Why even bother</h2>

<p>You might think that this is just a silly and outdated approach to collaborative development. &quot;Why not simply open a pull request?&quot; you might ask. Some projects, especially low-level oriented ones like the Linux kernel, do not want to rely on third-party platforms like GitHub to host their code, with good reasons:</p>

<ol><li>Everyone can participate! You don&#39;t need to register an account on some proprietary website to collaborate in a project that uses a patch-based workflow. You don&#39;t even have to expose your identity, if you don&#39;t want to. All you need is an email-address, and frankly most of us have one.</li><li>It&#39;s plain simple! Once you get used to generating and applying patches on the command line, it is in fact easier and faster than opening a pull request in some clunky GUI. It doesn&#39;t get simpler than plain text.</li><li>It is rewarding! Once you have submitted a patch to a project, there is no better feeling than getting a simple &quot;Applied, thanks!&quot; response from a maintainer. And if it&#39;s a response that contains feedback rather than an approval, it feels even better to submit that reworked code again and get it eventually applied.</li></ol>

<h2>Conclusion</h2>

<p>The patch-based workflow is an alternative way to collaborate with developers. If it helps you in your day to day business depends on the projects you are contributing to, but in the end it is always good to have many tools under your belt.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Testing isn't hard
            </title>
            <link>
                https://garrit.xyz/posts/testing-isnt-hard?utm_source=rss
            </link>
            <pubDate>
                Fri, 08 Nov 2019 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>&quot;I write two tests before implementing a method&quot;, &quot;My project has 90% coverage&quot;.</p>

<p>I don&#39;t know about you, but that&#39;s something I don&#39;t hear very often. But why is that?</p>

<p>Testing is not even that difficult to do, but yet it is always coming short in my projects. About a year ago, I&#39;ve tried to implement tests in my React applications with little success, mostly because integrating <code>enzyme</code> and configuring it correctly is not that intuitive as a relatively new developer. I want to share my (partly opinionated) approach to JavaScript testing with <code>jest</code>, to get you started. In a later post I will demonstrate a way to implement <code>enzyme</code> into your React projects.</p>

<h1>The basics of testing JavaScript functions</h1>

<p>To get started, you need a npm-project. I don&#39;t think I have to explain that, but just in case:</p>

<p><code>bash
mkdir awesome-testing-project
cd awesome-testing-project
npm init -y
</code></p>

<p>Of course, we need a unit we want to test. What about a method that returns the first element of an array?</p>

<p><code>js
module.exports = function firstElement(arr) {
	return arr[1];
};
</code></p>

<p>You already spotted a bug, huh? Let&#39;s keep it simple for now.</p>

<p>Install and initialize Jest, an open-source testing framework maintained by Facebook. When initializing, you should check every question with <code>y</code>.</p>

<p><code>bash
npm i --save-dev jest
npx jest --init
</code></p>

<p>Next up, we need to define our first test. Conventionally, we create a folder named <code>__tests__</code> in the directory of the module we want to test. inside it, there should be a file named <code>&lt;module&gt;.test.js</code>. Something like this:</p>

<p><code>bash
▶ tree
.
├── package.json
└── src
    ├── __tests__
    │   └── firstElement.test.js
    └── firstElement.js
</code></p>

<p>Jest provides global functions that do not need to be imported in a file. A simple test can look like this:</p>

<p><code></code>`js
const firstElement = require(&quot;../firstElement.js&quot;);</p>

<p>test(&quot;firstElement gets first element of array&quot;, () =&gt; {
	expect(firstElement([1, 2])).toBe(1);
});
<code></code>`</p>

<p><code>expect</code> is another word for <code>assert</code>. If you ask me, &quot;Expect firstElement of [1, 2] to be 1&quot; sounds reasonably english, doesn&#39;t it? After defining the test, all there is to do left is to run the <code>npm test</code> command, which has been created for us by running <code>npx jest --init</code> earlier.</p>

<p><code></code>`bash
▶ npm test</p>

<blockquote><p>jest</p></blockquote>

<p> FAIL  src/<strong>tests</strong>/firstElement.test.js
  ✕ firstElement (6ms)</p>

<p>  ● firstElement</p>

<pre><code>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: 2

  2 |
  3 | test(&#39;firstElement&#39;, () =&gt; {
&gt; 4 |   expect(firstElement([1, 2])).toBe(1);
    |                                ^
  5 | });
  6 |

  at Object.&lt;anonymous&gt;.test (src/__tests__/firstElement.test.js:4:32)</code></pre>

<p>Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        1.1s
Ran all test suites.
npm ERR! Test failed.  See above for more details.
<code></code>`</p>

<p>Whoops! Looks like we have found a bug! Let&#39;s fix it by adjusting the index of the return value in the firstElement function:</p>

<p><code>js
module.exports = function firstElement(arr) {
	return arr[0];
};
</code></p>

<p>And after rerunning <code>npm test</code>:</p>

<p><code></code>`bash
▶ npm test</p>

<blockquote><p>jest</p></blockquote>

<p> PASS  src/<strong>tests</strong>/firstElement.test.js
  ✓ firstElement (4ms)</p>

<p>Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        0.666s, estimated 2s
Ran all test suites.
<code></code>`</p>

<p>Yay, your first unit test! Of course, there is much more to find out about the Jest framework. To see a full guide, read the <a href="https://jestjs.io/">official docs</a>.</p>

<p>I have prepared a <a href="https://github.com/garritfra/react-parcel-boilerplate">template repository</a> for building react apps. It also uses Jest to run tests, you don&#39;t have to worry about a thing! If you found this interesting, consider checking out my other blog posts, and/or check out my <a href="https://github.com/garritfra">GitHub</a>!</p>]]>
            </description>
        </item>
        <item>
            <title>
                Fighting Array Functions with ES6
            </title>
            <link>
                https://garrit.xyz/posts/fighting-array-functions-with-es6?utm_source=rss
            </link>
            <pubDate>
                Sun, 07 Apr 2019 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Yesterday, I came across an interesting bug regarding JavaScript Arrays, and I wanted to share my approach to fixing it.
At a basic level, I wanted to pass part of an array to a function, but wanted to use the original array later on.</p>

<p><code>js
let arr = [1, 2, 3, 4, 5]
let something = arr.splice(0, 3)
do(something) // []
DoSomethingWithOriginal(arr)
</code></p>

<p>Thinking that Array.prototype functions don’t mutate the array directly, I moved on with my day. This lead to a bunch of problems down the line.
Some array methods in the EcmaScript specification are designed to mutate arrays, while others do not.</p>

<h3>Non-mutating functions</h3>

<ul><li>Array.prototype.map()</li><li>Array.prototype.slice()</li><li>Array.prototype.join()</li><li>…</li></ul>

<p>These functions do not mutate the array they are called on. For example:</p>

<p><code>js
let arr = [1, 2, 3, 4, 5];
let partOfArr = arr.slice(1, 2);
console.log(partOfArr); // [2, 3]
console.log(arr); // [1, 2, 3, 4, 5]
</code></p>

<h3>Mutating functions</h3>

<ul><li>Array.prototype.sort()</li><li>Array.prototype.splice()</li><li>Array.prototype.reverse()</li><li>…</li></ul>

<p>These methods mutate the array directly. This can lead to unreadable code, as the value can be manipulated from anywhere. For example:</p>

<p><code>js
let arr = [5, 2, 4];
arr.sort();
console.log(arr); // [2, 4, 5]
</code></p>

<p>To me, it is very unclear, which functions do, and which don’t mutate arrays directly. But, there’s a simple trick you can use to stop letting the functions mutate arrays directly, ultimately leading to more readable and reliable code.</p>

<h2>Enter: The ES6 Spread Operator!</h2>

<p><img alt="Spread Operator" src="https://images.unsplash.com/photo-1518297056586-889f796873e0?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1225&amp;q=80"/></p>

<p>Take a look at this snippet:</p>

<p><code>js
let arr = [3, 5, 1, 2, 4];
let sorted = [...arr].sort();
console.log(arr); // [3, 5, 1, 2, 4]
console.log(sorted); // [1, 2, 3, 4, 5]
</code></p>

<p>Voilà! We have a sorted array, and the original one is also around. The spread operator(<code>[...arr]</code>) is used to create a new array with every value of arr .
You can use this for arrays, as well as objects:</p>

<p><code>js
let obj = {
	field: &quot;example&quot;,
};
let extendedObj = {
	...obj,
	anotherField: 42,
};
console.log(extendedObj.field); // &quot;example&quot;
</code></p>

<h2>Conclusion</h2>

<p>ES6 brought us awesome features like let and const assignments, as well as arrow functions. A more unknown feature however is the spread operator. I hope you now know how to use the spread operator, and that you can adopt it for cleaner and simpler code.</p>]]>
            </description>
        </item>
    </channel>
</rss>