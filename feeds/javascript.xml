<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Thu, 01 Jun 2023 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                Single Page Applications on GitHub Pages
            </title>
            <guid>
                https://garrit.xyz/posts/2023-06-01-single-page-applications-on-github-pages
            </guid>
            <link>
                https://garrit.xyz/posts/2023-06-01-single-page-applications-on-github-pages?utm_source=rss
            </link>
            <pubDate>
                Thu, 01 Jun 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>My latest project, <a href="https://sendpasswords.net/">sendpasswords.net</a> is a <a href="https://developer.mozilla.org/en-US/docs/Glossary/SPA">Single Page Application</a> deployed on GitHub Pages.</p>

<p>GitHub Pages is configured in a way to host static HTML files without any bells and whistles. This means that if you try to fetch a document that&#39;s <em>not</em> the index, for example <code>/foo</code>, the server will try to load the file with that name. </p>

<p>By nature, SPAs only consist of a single HTML entry point (<code>index.html</code> in most cases). It&#39;s responsible for routing the user to the correct page if there are multiple paths. And here&#39;s the crux: if the user tries to load <code>/foo</code>, he will not land at the SPA entry point. Instead, he will see a <code>404</code> error.</p>

<h2>The solution</h2>

<p>A <code>404</code> response will automatically return a file called <code>404.html</code>, which we can use to our advantage. After building the application, simply copy the <code>index.html</code> to <code>404.html</code>, as demonstrated by <a href="https://github.com/garritfra/sendpasswords.net/commit/66bdb68c229a3ac3386f7816a746155e658eb586">this commit</a>. This will use <code>index.html</code> to serve the application on the root level, and <code>404.html</code> to load <em>the same app</em> if the page doesn&#39;t exist as a file. Whether the <code>index.html</code> is needed if there&#39;s already a <code>404.html</code> is up to you. I left it in to make clear that this is just a workaround.</p>

<p>This is a <a href="https://stackoverflow.com/a/69308662/9046809">well known</a> workaround, but I wanted to bring some extra awareness to it, since it&#39;s a problem I ran into a couple of times so far. Happy SPAing!</p>

<hr/>

<p>This is post 069 (nice) of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                TIL how to get the active language of a browser
            </title>
            <guid>
                https://garrit.xyz/posts/2022-01-28-til-how-to-get-the-selected-language-of-a-browser
            </guid>
            <link>
                https://garrit.xyz/posts/2022-01-28-til-how-to-get-the-selected-language-of-a-browser?utm_source=rss
            </link>
            <pubDate>
                Fri, 28 Jan 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Today I learned how to get the selected language of a browser.</p>

<p>It&#39;s super simple!</p>

<p><code>js
const userLang = navigator.language || navigator.userLanguage;
</code></p>

<h2>An interesting discovery</h2>

<p>Eventhough I&#39;m using a chromium-based browser, the user-agent and some other
fields of the <code>navigator</code> object imply that I&#39;m running Mozilla Netscape 5.0.
This is a relic of the past, where the user agent heavily influenced the look
and feel of a served website. Nowadays, all rendering engines work more or less
equally, but back then, browsers tried to be as good as the market leader, so
they disquised themselves as Netscape. This podcast episode goes into more
detail about how this developed (jump to minute 3 to listen to this topic):</p>

<p>&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https://open.spotify.com/embed/episode/71URVFdhF6pcUBRhxerDIV?utm_source=generator&amp;t=190&quot; width=&quot;100%&quot; height=&quot;232&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;/iframe&gt;</p>

<hr/>

<p>This is post 024 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>

<h2>Resources</h2>

<ul><li><a href="https://stackoverflow.com/questions/8199760/how-to-get-the-browser-language-using-javascript">Stack Overflow Thread on getting the user language</a></li><li><a href="https://corecursive.com/internet-is-duct-tape/#">Full link to the Podcast episode</a></li></ul>]]>
            </description>
        </item>
        <item>
            <title>
                Quick tip! React useToggle Hook
            </title>
            <guid>
                https://garrit.xyz/posts/2021-12-21-usetoggle-react-hook
            </guid>
            <link>
                https://garrit.xyz/posts/2021-12-21-usetoggle-react-hook?utm_source=rss
            </link>
            <pubDate>
                Tue, 21 Dec 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Here&#39;s a useful react hook for situations where you have to keep track of the
state of a dialog, popup, etc.:</p>

<p><code></code>`js
import { useState } from &quot;react&quot;;</p>

<p>export default (value) =&gt; {
	const [state, setState] = useState(value);</p>

<pre><code>const setStateActive = () =&gt; {
	setState(true);
};

const setStateInactive = () =&gt; {
	setState(false);
};

return [state, setStateActive, setStateInactive];</code></pre>

<p>};
<code></code>`</p>

<p>Usage:</p>

<p><code></code>`js
const SomeComponent = () =&gt; {
	const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] =
		useToggle(false);</p>

<pre><code>return (
	&lt;&gt;
		&lt;Button onClick={openDeleteDialog}&gt;Open Delete Dialog&lt;/Button&gt;
		&lt;Dialog isOpen={isDeleteDialogOpen} onClose={closeDeleteDialog}&gt;&lt;/Dialog&gt;
	&lt;/&gt;
);</code></pre>

<p>};
<code></code>`</p>

<p>This is post 021 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Server-Side Caching with Apollo GraphQL
            </title>
            <guid>
                https://garrit.xyz/posts/2021-10-04-server-side-caching-with-apollo-graphql
            </guid>
            <link>
                https://garrit.xyz/posts/2021-10-04-server-side-caching-with-apollo-graphql?utm_source=rss
            </link>
            <pubDate>
                Mon, 04 Oct 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I recently implemented server-side caching for one of our applications at work.
This guide tries to document that I&#39;ve learned. It assumes that you are using
an apollo server of version 3 or higher.</p>

<h3>What is Server-Side Caching?</h3>

<p>The point of server-side caching is to reduce the load of your database by
“remembering” the results of a query for a certain period. If the exact same
query comes in again, that remembered result will be returned.</p>

<p>Caching should be handled with care. You should never enable caching for your
entire application. Instead, you should identify the bottlenecks and develop a
strategy to overcome them.</p>

<h3>Enabling caching on the server</h3>

<p>The Apollo Team has done a great job
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/">documenting</a>
the caching behavior of their server. To add caching to your existing
Apollo-Server, you first have to add the <code>responseCachePlugin</code> to your
configuration as shown
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#caching-with-responsecacheplugin-advanced">here</a>:</p>

<p><code></code>`js
import responseCachePlugin from &quot;apollo-server-plugin-response-cache&quot;;</p>

<p>const server = new ApolloServer({
	// ...other options...
	plugins: [responseCachePlugin()],
});
<code></code>`</p>

<p>Then, you have to configure a cache backend. By default, Apollo Server will
store the caches in RAM, but I’d recommend <a href="https://www.apollographql.com/docs/apollo-server/data/data-sources/#using-memcachedredis-as-a-cache-storage-backend">using
Redis</a>
(or Memcached, if you like), especially if your application is spread across
multiple instances of the same backend.</p>

<p><code></code>`js
const { BaseRedisCache } = require(&quot;apollo-server-cache-redis&quot;);
const Redis = require(&quot;ioredis&quot;);</p>

<p>const server = new ApolloServer({
	// ...
	cache: new BaseRedisCache({
		plugins: [responseCachePlugin()],
		client: new Redis({
			host: &quot;redis-server&quot;,
		}),
	}),
});
<code></code>`</p>

<blockquote><p>Note that you have to use the ioredis library here. node_redis is deprecated
as of v2.6.0 of apollo-server-cache-redis.</p></blockquote>

<p>If everything went well, your server should now know how to cache responses!
This alone won’t get you very far, since it doesn’t know what to cache.</p>

<h3>Telling Apollo what to cache</h3>

<p>To make a type cachable, you have to declare <strong>cache hints</strong>. These properties
can either be set in the
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#in-your-resolvers-dynamic">resolver</a>,
or
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#in-your-schema-static">statically</a>
in the schema. To keep it simple, this guide will stick to the static method.
Feel free to experiment with the dynamic approach though!</p>

<p>To enable cache hints, simply add the following directive to your schema (you
only have to do this once):</p>

<p><code></code>`gql
enum CacheControlScope {
	PUBLIC
	PRIVATE
}</p>

<p>directive @cacheControl(
	maxAge: Int
	scope: CacheControlScope
	inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION
<code></code>`</p>

<p>Now you can add the <code>@cacheControl</code> directive to every type that should be cached.</p>

<p><code></code>`gql</p>

<h1>This type will be cached for 30 seconds</h1>

<p>type Post @cacheControl(maxAge: 30) {
	id: ID!
	title: String
	author: Author
	comments: [Comment]
}
<code></code>`</p>

<p>For security reasons, these conditions are <a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#why-are-these-the-maxage-defaults">very
strict</a>:</p>

<blockquote><p>Our philosophy behind Apollo Server caching is that a response should only be
considered cacheable if every part of that response opts in to being
cacheable.</p></blockquote>

<p>This means that every type needs to explicitly decide how long it should be
cached. According to this note, the example above actually won’t be cached at
all!</p>

<p>Having to specify the <code>maxAge</code> of every type would be tedious, so the authors
have come up with the <code>inheritMaxAge</code> property, which allows the type to
inherit the settings from its parent. So, in order to make our example
cachable, we have to enable cache control for all its subfields, either by
setting the <code>maxAge</code> explicitly or by inheriting it from the parent:</p>

<p><code></code>`gql
type Post @cacheControl(maxAge: 30) {
	id: ID!
	title: String
	author: Author
	comments: [Comment]
}</p>

<p>type Author @cacheControl(inheritMaxAge: true) {
	id: ID!
	name: String
}</p>

<p>type Comment @cacheControl(inheritMaxAge: true) {
	id: ID!
	body: String
}
<code></code>`</p>

<p>Now, whenever you query a <code>Post</code>, it will be thrown in the cache. If you query
the type again within 30 seconds, the query resolver won’t execute. Instead, it
will be read from the cache. Keep in mind that cache hints can also be set on
<code>query</code> and <code>mutation</code> fields. This can be handy if you want to cache the
entire response of a request.</p>

<h3>Gotcha 1: Multiple Response Variations</h3>

<p>The use-case where this topic first came up required us to have different
responses based on the type of the logged in user. An <code>Admin</code> should see a
different result than a <code>Visitor</code>. If you ignore this fact, it could be that a
visitor could see the cache result of a query previously executed by an admin!</p>

<p>This problem can be counteracted by setting extra information in the cache key
via <code>extraCacheKeyData</code> (see
<a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#configuring-reads-and-writes">this</a>
paragraph):</p>

<p><code>js
plugins: [
    responseCachePlugin({
        extraCacheKeyData: (ctx) =&gt; (
            ctx.context.auth.isAdmin
        ),
    }),
],
</code></p>

<p>This example can create two distinct caches: One for users that are marked as
admins, and one for regular users.</p>

<h3>Gotcha 2: User-specific caches</h3>

<p>Besides caching for a group of users, you can also cache responses <a href="https://www.apollographql.com/docs/apollo-server/performance/caching/#identifying-users-for-private-responses">for every
user
individually</a>.
You may have noticed that you can also set a <code>scope</code> field in the cache control
directive. This will only cache the response if a user is logged in:</p>

<p><code>gql
type Post {
	id: ID!
	title: String
	author: Author @cacheControl(maxAge: 10, scope: PRIVATE)
}
</code></p>

<p>Apollo determines if a user is logged in or not, based on if the <code>sessionId</code>
function has returned a value other than <code>null</code>.</p>

<p><code>js
import responseCachePlugin from &quot;apollo-server-plugin-response-cache&quot;;
const server = new ApolloServer({
	// ...other settings...
	plugins: [
		responseCachePlugin({
			sessionId: (requestContext) =&gt;
				requestContext.request.http.headers.get(&quot;sessionid&quot;) || null,
		}),
	],
});
</code></p>

<p>I’m unsure how effective this pattern is, since every user will receive its key
in the cache. This kind of defeats the purpose of server-side caching, which is
meant to reduce load on the database. If you’re trying to cache fields for
individual users, you might also want to take a look at client-side caching via
<a href="https://github.com/appmotion/apollo-augmented-hooks">apollo-augmented-hooks</a>.</p>

<p>This is post 020 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                I joined the 512KB club
            </title>
            <guid>
                https://garrit.xyz/posts/2021-01-13-512kb-club
            </guid>
            <link>
                https://garrit.xyz/posts/2021-01-13-512kb-club?utm_source=rss
            </link>
            <pubDate>
                Wed, 13 Jan 2021 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>JavaScript rules the web, literally. In fact, this website is built with JavaScript (Next.js). I recently started to think about if I really needed this much overhead for a simple site like this. After all, I don&#39;t have any fancy user interaction features or complex animation that would justify the JavaScript on this page.</p>

<p>There is a new (no, not that new) philosophy called <a href="https://leanweb.dev/">the lean web</a>. It essentially tries to keep websites tiny and semantically correct. This has many benefits, ranging from less pollution generated by your site to improved SEO, since many search engines favor a semantically correct website over a site that abuses JavaScript to mimic the features, that are baked into html anyway.</p>

<p>In order to get lean, I decided to join <a href="https://512kb.club/">the 512KB club</a>. This website lists sites that are below 512KB in total (uncompressed, with all dependencies). To get below that mark, I had to remove my face from the frontpage (I&#39;m sure you&#39;ll miss it😅), since the image itself was roughly 750KB. I&#39;m now just below 500KB, which qualifies me to join the blue team.</p>

<p><a href="https://512kb.club"><img alt="Blue Team" src="https://512kb.club/images/blue-team.svg"/></a></p>

<p>I&#39;m not planning to stop here though. I think keeping a website small and simple is an excellent practice. My next step will be to get rid of all the JS junk on this site and only rely on HTML and CSS. I still want to be able to write my posts in Markdown, so I will have to come up with a way to generate pages from them. A safe bet for this would be to use a SSG like <a href="https://gohugo.io/">Hugo</a>. Frankly, <a href="https://erikwinter.nl/articles/2020/why-i-built-my-own-shitty-static-site-generator/">writing my own simple SSG probably wouldn&#39;t hurt either</a>. Let&#39;s see how high I can climb the ranks of the 512KB club. Care to join me?</p>

<p>This is post 003 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Testing isn't hard
            </title>
            <guid>
                https://garrit.xyz/posts/testing-isnt-hard
            </guid>
            <link>
                https://garrit.xyz/posts/testing-isnt-hard?utm_source=rss
            </link>
            <pubDate>
                Fri, 08 Nov 2019 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>&quot;I write two tests before implementing a method&quot;, &quot;My project has 90% coverage&quot;.</p>

<p>I don&#39;t know about you, but that&#39;s something I don&#39;t hear very often. But why is that?</p>

<p>Testing is not even that difficult to do, but yet it is always coming short in my projects. About a year ago, I&#39;ve tried to implement tests in my React applications with little success, mostly because integrating <code>enzyme</code> and configuring it correctly is not that intuitive as a relatively new developer. I want to share my (partly opinionated) approach to JavaScript testing with <code>jest</code>, to get you started. In a later post I will demonstrate a way to implement <code>enzyme</code> into your React projects.</p>

<h1>The basics of testing JavaScript functions</h1>

<p>To get started, you need a npm-project. I don&#39;t think I have to explain that, but just in case:</p>

<p><code>bash
mkdir awesome-testing-project
cd awesome-testing-project
npm init -y
</code></p>

<p>Of course, we need a unit we want to test. What about a method that returns the first element of an array?</p>

<p><code>js
module.exports = function firstElement(arr) {
	return arr[1];
};
</code></p>

<p>You already spotted a bug, huh? Let&#39;s keep it simple for now.</p>

<p>Install and initialize Jest, an open-source testing framework maintained by Facebook. When initializing, you should check every question with <code>y</code>.</p>

<p><code>bash
npm i --save-dev jest
npx jest --init
</code></p>

<p>Next up, we need to define our first test. Conventionally, we create a folder named <code>__tests__</code> in the directory of the module we want to test. inside it, there should be a file named <code>&lt;module&gt;.test.js</code>. Something like this:</p>

<p><code>bash
▶ tree
.
├── package.json
└── src
    ├── __tests__
    │   └── firstElement.test.js
    └── firstElement.js
</code></p>

<p>Jest provides global functions that do not need to be imported in a file. A simple test can look like this:</p>

<p><code></code>`js
const firstElement = require(&quot;../firstElement.js&quot;);</p>

<p>test(&quot;firstElement gets first element of array&quot;, () =&gt; {
	expect(firstElement([1, 2])).toBe(1);
});
<code></code>`</p>

<p><code>expect</code> is another word for <code>assert</code>. If you ask me, &quot;Expect firstElement of [1, 2] to be 1&quot; sounds reasonably english, doesn&#39;t it? After defining the test, all there is to do left is to run the <code>npm test</code> command, which has been created for us by running <code>npx jest --init</code> earlier.</p>

<p><code></code>`bash
▶ npm test</p>

<blockquote><p>jest</p></blockquote>

<p> FAIL  src/<strong>tests</strong>/firstElement.test.js
  ✕ firstElement (6ms)</p>

<p>  ● firstElement</p>

<pre><code>expect(received).toBe(expected) // Object.is equality

Expected: 1
Received: 2

  2 |
  3 | test(&#39;firstElement&#39;, () =&gt; {
&gt; 4 |   expect(firstElement([1, 2])).toBe(1);
    |                                ^
  5 | });
  6 |

  at Object.&lt;anonymous&gt;.test (src/__tests__/firstElement.test.js:4:32)</code></pre>

<p>Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        1.1s
Ran all test suites.
npm ERR! Test failed.  See above for more details.
<code></code>`</p>

<p>Whoops! Looks like we have found a bug! Let&#39;s fix it by adjusting the index of the return value in the firstElement function:</p>

<p><code>js
module.exports = function firstElement(arr) {
	return arr[0];
};
</code></p>

<p>And after rerunning <code>npm test</code>:</p>

<p><code></code>`bash
▶ npm test</p>

<blockquote><p>jest</p></blockquote>

<p> PASS  src/<strong>tests</strong>/firstElement.test.js
  ✓ firstElement (4ms)</p>

<p>Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        0.666s, estimated 2s
Ran all test suites.
<code></code>`</p>

<p>Yay, your first unit test! Of course, there is much more to find out about the Jest framework. To see a full guide, read the <a href="https://jestjs.io/">official docs</a>.</p>

<p>I have prepared a <a href="https://github.com/garritfra/react-parcel-boilerplate">template repository</a> for building react apps. It also uses Jest to run tests, you don&#39;t have to worry about a thing! If you found this interesting, consider checking out my other blog posts, and/or check out my <a href="https://github.com/garritfra">GitHub</a>!</p>]]>
            </description>
        </item>
        <item>
            <title>
                Fighting Array Functions with ES6
            </title>
            <guid>
                https://garrit.xyz/posts/fighting-array-functions-with-es6
            </guid>
            <link>
                https://garrit.xyz/posts/fighting-array-functions-with-es6?utm_source=rss
            </link>
            <pubDate>
                Sun, 07 Apr 2019 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Yesterday, I came across an interesting bug regarding JavaScript Arrays, and I wanted to share my approach to fixing it.
At a basic level, I wanted to pass part of an array to a function, but wanted to use the original array later on.</p>

<p><code>js
let arr = [1, 2, 3, 4, 5]
let something = arr.splice(0, 3)
do(something) // []
DoSomethingWithOriginal(arr)
</code></p>

<p>Thinking that Array.prototype functions don’t mutate the array directly, I moved on with my day. This lead to a bunch of problems down the line.
Some array methods in the EcmaScript specification are designed to mutate arrays, while others do not.</p>

<h3>Non-mutating functions</h3>

<ul><li>Array.prototype.map()</li><li>Array.prototype.slice()</li><li>Array.prototype.join()</li><li>…</li></ul>

<p>These functions do not mutate the array they are called on. For example:</p>

<p><code>js
let arr = [1, 2, 3, 4, 5];
let partOfArr = arr.slice(1, 2);
console.log(partOfArr); // [2, 3]
console.log(arr); // [1, 2, 3, 4, 5]
</code></p>

<h3>Mutating functions</h3>

<ul><li>Array.prototype.sort()</li><li>Array.prototype.splice()</li><li>Array.prototype.reverse()</li><li>…</li></ul>

<p>These methods mutate the array directly. This can lead to unreadable code, as the value can be manipulated from anywhere. For example:</p>

<p><code>js
let arr = [5, 2, 4];
arr.sort();
console.log(arr); // [2, 4, 5]
</code></p>

<p>To me, it is very unclear, which functions do, and which don’t mutate arrays directly. But, there’s a simple trick you can use to stop letting the functions mutate arrays directly, ultimately leading to more readable and reliable code.</p>

<h2>Enter: The ES6 Spread Operator!</h2>

<p><img alt="Spread Operator" src="https://images.unsplash.com/photo-1518297056586-889f796873e0?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1225&amp;q=80"/></p>

<p>Take a look at this snippet:</p>

<p><code>js
let arr = [3, 5, 1, 2, 4];
let sorted = [...arr].sort();
console.log(arr); // [3, 5, 1, 2, 4]
console.log(sorted); // [1, 2, 3, 4, 5]
</code></p>

<p>Voilà! We have a sorted array, and the original one is also around. The spread operator(<code>[...arr]</code>) is used to create a new array with every value of arr .
You can use this for arrays, as well as objects:</p>

<p><code>js
let obj = {
	field: &quot;example&quot;,
};
let extendedObj = {
	...obj,
	anotherField: 42,
};
console.log(extendedObj.field); // &quot;example&quot;
</code></p>

<h2>Conclusion</h2>

<p>ES6 brought us awesome features like let and const assignments, as well as arrow functions. A more unknown feature however is the spread operator. I hope you now know how to use the spread operator, and that you can adopt it for cleaner and simpler code.</p>]]>
            </description>
        </item>
    </channel>
</rss>