<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Sun, 26 Mar 2023 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                Software is not defined by the language it's written in
            </title>
            <link>
                https://garrit.xyz/posts/2023-03-26-software-is-not-defined-by-the-language-it's-written-in?utm_source=rss
            </link>
            <pubDate>
                Sun, 26 Mar 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Rust is not just a programming language, it&#39;s also a status symbol. By now, it kind of became a meme that people writing programs in Rust have to make explicit that &quot;X is written in Rust&quot;.</p>

<p>How fast or safe the language is doesn&#39;t define how good the software is. Software in TypeScript can be just as good as software written in C, if written by the right people.</p>

<p>When starting a new project, try to focus on the domain of the problem and pick a language based on that. Don&#39;t decide on the language before you know what problem you&#39;re trying to solve. If the answer to this is always one option (like Rust), <a href="https://seths.blog/2023/03/the-answer-to-every-question/">you might be in a bubble</a>.</p>

<hr/>

<p>This is post 060 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                A software requirements checklist
            </title>
            <link>
                https://garrit.xyz/posts/2023-03-11-a-software-requirements-checklist?utm_source=rss
            </link>
            <pubDate>
                Sat, 11 Mar 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just found a <a href="https://www.etsy.com/codeascraft/a-checklist-manifetsy">great post</a> on the Etsy Engineering blog suggesting a possible checklist for new product requirements. In reality, this checklist is very hard to fulfill, but it&#39;s a nice reminder of what a well thought out requirement could look like.</p>

<h3>Scope</h3>

<ul><li>Is the feature meant to be very polished and finished or are we just trying to get user feedback as an MVP?</li><li>If we are running a MVP, is the current feature a true MVP? How can we simplify or cut scope?</li></ul>

<h3>Eligibility</h3>

<ul><li>What populations should be included or excluded from the experiment? When should users see this feature? (Which pages, signed in/signed out, mobile, desktop, etc.)
Where/when should bucketing occur?</li><li>Will the experiment conflict with any other experiments? Do the experiments need to run exclusively?</li><li>What countries should the experiment run in (can impact translations)?</li></ul>

<h3>A11Y</h3>

<ul><li>Is there any special accessibility work this feature will require? If extra work is anticipated, check in early with our a11y team.</li><li>When testing and developing we should keep two users in mind - a keyboard user and a voice over user, do we need to add other code for these users?</li></ul>

<h3>Translations</h3>

<ul><li>Are there any strings to be translated that should be submitted ASAP?</li><li>Do we need to translate any labels for a11y?</li></ul>

<h3>Observability</h3>

<ul><li>How will we know that the feature is working? Are there existing graphs we can use or do we need new ones?</li><li>Should any of these metrics have a threshold or alerting?</li><li>Are we missing any key events to obtain user feedback?</li><li>How will we compare our control and variant?</li></ul>

<h3>Performance</h3>

<ul><li>Is there anything in my experiment that could degrade performance of the site?</li><li>Do I need an operational experiment to verify that Iâ€™m not impacting performance?</li></ul>

<h3>Error States</h3>

<ul><li>Do we have designs for loading states?</li><li>Do we have designs for unsuccessful requests and error handling?</li><li>Do we have informative logging when there are errors?</li></ul>

<h3>QA</h3>

<ul><li>What set of browsers and devices should we test our new feature against?</li><li>Which user perspectives do we need to test?</li></ul>

<h3>Ramping</h3>

<ul><li>What will our ramping strategy be?</li></ul>

<hr/>

<p>Check out the <a href="https://www.etsy.com/codeascraft/a-checklist-manifetsy">original post</a> for a full writeup and the intentions behind this checklist.</p>

<hr/>

<p>This is post 056 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                OpenSSF Best Practices
            </title>
            <link>
                https://garrit.xyz/posts/2023-02-14-openssf-best-practices?utm_source=rss
            </link>
            <pubDate>
                Tue, 14 Feb 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>The Open Source Security Foundation (OpenSSF) provides <a href="https://bestpractices.coreinfrastructure.org/en/criteria/0">a list of best
practices</a> for open
source projects. Although this list is tailored towards free and open source
projects, I believe that this list is valuable for <em>all</em> software projects.
Here&#39;s a breakdown of all practices that I consider generic to all projects, no
matter its license, alongside some personal notes.</p>

<h2>Basics</h2>

<h3>Basic project website content</h3>

<p>The project website MUST succinctly describe what the software does (what problem does it solve?).</p>

<blockquote><p>A website might not always apply, but a README is a good place to put this information.</p></blockquote>

<p>The information on how to contribute MUST explain the contribution process (e.g., are pull requests used?)</p>

<blockquote><p>This information is also best placed in the README.</p></blockquote>

<p>The information on how to contribute SHOULD include the requirements for acceptable contributions (e.g., a reference to any required coding standard)</p>

<blockquote><p>-&gt; README.</p></blockquote>

<h3>Documentation</h3>

<p>The project MUST provide basic documentation for the software produced by the
project.</p>

<p>The project MUST provide reference documentation that describes the external
interface (both input and output) of the software produced by the project.</p>

<blockquote><p>I wouldn&#39;t consider reference documentation a requirement, but it&#39;s nice to
have.</p></blockquote>

<h3>Other</h3>

<p>The project sites (website, repository, and download URLs) MUST support HTTPS using TLS.</p>

<h2>Change Control</h2>

<h3>Public version-controlled source repository</h3>

<p>The project MUST have a version-controlled source repository ~~that is publicly readable and has a URL~~.</p>

<p>The project&#39;s source repository MUST track what changes were made, who made
the changes, and when the changes were made.</p>

<p>To enable collaborative review, the project&#39;s source repository MUST include interim versions for review between releases; it MUST NOT include only final releases.</p>

<blockquote><p>In some cases, code can&#39;t or shouldn&#39;t be versioned. For most website projects,
review environments in merge requests (Vercel, Netlify, GitLab) could be
considered.</p></blockquote>

<p>It is SUGGESTED that common distributed version control software be used (e.g., git) for the project&#39;s source repository.</p>

<h3>Unique version numbering</h3>

<p>The project results MUST have a unique version identifier for each release
intended to be used by users.</p>

<blockquote><p>Commit hashes can be used as unique version numbers in some cases.</p></blockquote>

<p>It is SUGGESTED that the Semantic Versioning (SemVer) or Calendar Versioning
(CalVer) version numbering format be used for releases. It is SUGGESTED that
those who use CalVer include a micro level value.</p>

<blockquote><p>As mentioned above, projects that are constantly in motion (e.g.
<a href="https://darktheme.club/">darktheme.club</a>) might want to consider using commit
hashes for version numbers instead.</p></blockquote>

<p>It is SUGGESTED that projects identify each release within their version
control system. For example, it is SUGGESTED that those using git identify each
release using git tags.</p>

<blockquote><p>Git tags are often neglected during development, but can be very useful.</p></blockquote>

<h3>Release notes</h3>

<p>The project MUST provide, in each release, release notes that are a
human-readable summary of major changes in that release to help users determine
if they should upgrade and what the upgrade impact will be. The release notes
MUST NOT be the raw output of a version control log (e.g., the &quot;git log&quot; command
results are not release notes). Projects whose results are not intended for
reuse in multiple locations (such as the software for a single website or
service) AND employ continuous delivery MAY select &quot;N/A&quot;.</p>

<blockquote><p>I wrote <a href="/posts/2021-02-20-changelogs">a post</a> about changelogs a while back.</p></blockquote>

<p>The release notes MUST identify every publicly known run-time vulnerability
fixed in this release that already had a CVE assignment or similar when the
release was created. This criterion may be marked as not applicable (N/A) if
users typically cannot practically update the software themselves (e.g., as
is often true for kernel updates). This criterion applies only to the
project results, not to its dependencies. If there are no release notes or
there have been no publicly known vulnerabilities, choose N/A.</p>

<h2>Reporting</h2>

<h3>Vulnerability report process</h3>

<p>If private vulnerability reports are supported, the project MUST include how
to send the information in a way that is kept private.</p>

<blockquote><p>For proprietary projects, it&#39;s often a good idea to have a public &quot;Report an issue&quot;
feature.</p></blockquote>

<h2>Quality</h2>

<h3>Working build system</h3>

<p>If the software produced by the project requires building for use, the
project MUST provide a working build system that can automatically rebuild
the software from source code.</p>

<p>It is SUGGESTED that common tools be used for building the software.</p>

<h3>Automated test suite</h3>

<p>The project MUST use at least one automated test suite ~~that is publicly
released as FLOSS (this test suite may be maintained as a separate FLOSS
project)~~. The project MUST clearly show or document how to run the test
suite(s) (e.g., via a continuous integration (CI) script or via documentation in
files such as BUILD.md, README.md, or CONTRIBUTING.md).</p>

<p>A test suite SHOULD be invocable in a standard way for that language.</p>

<p>E.g. <code>npm run test</code>, <code>cargo test</code>, etc.</p>

<p>It is SUGGESTED that the test suite cover most (or ideally all) the code
branches, input fields, and functionality.</p>

<blockquote><p>Write tests if they are useful, not for the sake of having 100% test coverage.</p></blockquote>

<p>It is SUGGESTED that the project implement continuous integration (where new
or changed code is frequently integrated into a central code repository and
automated tests are run on the result).</p>

<h3>New functionality testing</h3>

<p>The project MUST have a general policy (formal or not) that as major new
functionality is added to the software produced by the project, tests of that
functionality should be added to an automated test suite.</p>

<p>The project MUST have evidence that the test policy for adding tests has been
adhered to in the most recent major changes to the software produced by the
project.</p>

<blockquote><p>This is often covered if you have a CI pipeline.</p></blockquote>

<p>It is SUGGESTED that this policy on adding tests (see test_policy) be
documented in the instructions for change proposals.</p>

<blockquote><p>Consider adding a checkbox to your merge request template. For reference, here&#39;s
a checklist that I often use in templates:</p><p><code></code>`</p><h1>Checklist:</h1><ul><li>[ ] documented in the changelog</li><li>[ ] sufficiently tested</li><li>[ ] sufficiently documented
<code></code>`</li></ul></blockquote>

<h3>Warning flags</h3>

<p>The project MUST enable one or more compiler warning flags, a &quot;safe&quot;
language mode, or use a separate &quot;linter&quot; tool to look for code quality
errors or common simple mistakes, if there is at least one FLOSS tool that
can implement this criterion in the selected language.</p>

<p>The project MUST address warnings.</p>

<blockquote><p>Ensure this by disallowing warnings in your CI pipeline.</p></blockquote>

<p>It is SUGGESTED that projects be maximally strict with warnings in the
software produced by the project, where practical.</p>

<h2>Security</h2>

<h3>Secure development knowledge</h3>

<p>The project MUST have at least one primary developer who knows how to design
secure software.</p>

<p>At least one of the project&#39;s primary developers MUST know of common kinds of
errors that lead to vulnerabilities in this kind of software, as well as at
least one method to counter or mitigate each of them.</p>

<blockquote><p>Easier said than done, but be vocal if you&#39;re hesitant towards a feature or
implementation path.</p></blockquote>

<h3>Use basic good cryptographic practices</h3>

<p>The software produced by the project MUST use, by default, only cryptographic
protocols and algorithms that are publicly published and reviewed by experts (if
cryptographic protocols and algorithms are used).</p>

<p>If the software produced by the project is an application or library, and its
primary purpose is not to implement cryptography, then it SHOULD only call on
software specifically designed to implement cryptographic functions; it SHOULD
NOT re-implement its own.</p>

<blockquote><p>Don&#39;t reinvent the wheel. Not just for cryptography.</p></blockquote>

<p>The security mechanisms within the software produced by the project MUST use
default keylengths that at least meet the NIST minimum requirements through the
year 2030 (as stated in 2012). It MUST be possible to configure the software so
that smaller keylengths are completely disabled.</p>

<p>The default security mechanisms within the software produced by the project
MUST NOT depend on broken cryptographic algorithms (e.g., MD4, MD5, single DES,
RC4, Dual<em>EC</em>DRBG), or use cipher modes that are inappropriate to the context,
unless they are necessary to implement an interoperable protocol (where the
protocol implemented is the most recent version of that standard broadly
supported by the network ecosystem, that ecosystem requires the use of such an
algorithm or mode, and that ecosystem does not offer any more secure
alternative). The documentation MUST describe any relevant security risks and
any known mitigations if these broken algorithms or modes are necessary for an
interoperable protocol.</p>

<p>The default security mechanisms within the software produced by the project
SHOULD NOT depend on cryptographic algorithms or modes with known serious
weaknesses (e.g., the SHA-1 cryptographic hash algorithm or the CBC mode in
SSH).</p>

<p>The security mechanisms within the software produced by the project SHOULD
implement perfect forward secrecy for key agreement protocols so a session key
derived from a set of long-term keys cannot be compromised if one of the
long-term keys is compromised in the future.</p>

<p>If the software produced by the project causes the storing of passwords for
authentication of external users, the passwords MUST be stored as iterated
hashes with a per-user salt by using a key stretching (iterated) algorithm
(e.g., Argon2id, Bcrypt, Scrypt, or PBKDF2). See also OWASP Password Storage
Cheat Sheet).</p>

<p>The security mechanisms within the software produced by the project MUST
generate all cryptographic keys and nonces using a cryptographically secure
random number generator, and MUST NOT do so using generators that are
cryptographically insecure.</p>

<h3>Secured delivery against man-in-the-middle (MITM) attacks</h3>

<p>The project MUST use a delivery mechanism that counters MITM attacks. Using
https or ssh+scp is acceptable.</p>

<p>A cryptographic hash (e.g., a sha1sum) MUST NOT be retrieved over http and
used without checking for a cryptographic signature.</p>

<h3>Publicly known vulnerabilities fixed</h3>

<p>There MUST be no unpatched vulnerabilities of medium or higher severity that
have been publicly known for more than 60 days.</p>

<blockquote><p>This can be ensured using
<a href="https://docs.github.com/en/code-security/dependabot/working-with-dependabot">Dependabot</a>
or <a href="https://docs.renovatebot.com/">Renovate</a></p></blockquote>

<p>Projects SHOULD fix all critical vulnerabilities rapidly after they are reported.</p>

<blockquote><p>Again, use automatic dependency updating mechanisms for this.</p></blockquote>

<h3>Other security issues</h3>

<p>The public repositories MUST NOT leak a valid private credential (e.g., a
working password or private key) that is intended to limit public access.</p>

<h2>Analysis</h2>

<h3>Static code analysis</h3>

<p>At least one static code analysis tool (beyond compiler warnings and &quot;safe&quot;
language modes) MUST be applied to any proposed major production release of the
software before its release, if there is at least one ~~FLOSS~~ tool that implements
this criterion in the selected language.</p>

<p>It is SUGGESTED that at least one of the static analysis tools used for the
static_analysis criterion include rules or approaches to look for common
vulnerabilities in the analyzed language or environment.</p>

<p>All medium and higher severity exploitable vulnerabilities discovered with
static code analysis MUST be fixed in a timely way after they are confirmed.</p>

<p>It is SUGGESTED that static source code analysis occur on every commit or at
least daily.</p>

<h3>Dynamic code analysis</h3>

<p>It is SUGGESTED that at least one dynamic analysis tool be applied to any
proposed major production release of the software before its release.</p>

<p>It is SUGGESTED that if the software produced by the project includes
software written using a memory-unsafe language (e.g., C or C++), then at
least one dynamic tool (e.g., a fuzzer or web application scanner) be
routinely used in combination with a mechanism to detect memory safety
problems such as buffer overwrites.</p>

<blockquote><p>This is often overlooked.</p></blockquote>

<p>It is SUGGESTED that the project use a configuration for at least some dynamic
analysis (such as testing or fuzzing) which enables many assertions. In many
cases these assertions should not be enabled in production builds.</p>

<p>All medium and higher severity exploitable vulnerabilities discovered with
dynamic code analysis MUST be fixed in a timely way after they are confirmed.</p>

<hr/>

<p>This is post 046 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                6 ways you can contribute to open knowledge right now
            </title>
            <link>
                https://garrit.xyz/posts/2022-12-05-contributing-to-open-source-knowledge?utm_source=rss
            </link>
            <pubDate>
                Mon, 05 Dec 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I wrote the initial draft for this post a few months ago, traveling through
Norway in a rented campervan. While roaming the beautiful landscapes, I spent a
lot of time thinking. Reading books while traveling really is the best way to
find new inspiration.</p>

<p>On our trip, we wanted to try out an alternative to Google Maps. Most of the
OpenStreetMap-based apps lack important features, but we recently stumbled upon
<a href="https://www.magicearth.com/">MagicEarth</a>, which perfectly fills the void.
OpenStreetMap has been 95% accurate for us. Those last 5% are mostly less famous
hiking trails and attractions that could easily be filled in by people like you
and me. This inspired me to write this blog post, where I share six ways that
you can contribute to open source knowledge right now.</p>

<h2>OpenStreetMap</h2>

<p>As mentioned above, I spotted some minor inconsistencies in
<a href="https://openstreetmap.org">OpenStreetMap</a> while driving through Norway. We
tracked our hikes with an app that is able to export a GPX file, which can be
imported to OpenStreetMap to check if the trail matches (or if it is missing),
and took note of incorrect or sloppy roads/buildings. Back home, I plan to sit
down and fix up those issues.</p>

<p>But you don&#39;t have to be on a roadtrip to contribute to OpenStreetMap! Chances
are you know your local surroundings pretty well. Just navigate to your
neighborhood and see what could be improved. Maybe you know a public toilet, a
park or a secret road that is not shown on the map? As a matter of fact, my
private address was missing, so I added it via the editor. I can now use any of
the many OpenStreetMap-based apps to navigate home!</p>

<h2>Wikipedia (and other wikis)</h2>

<p>I often feel like I can&#39;t contribute much to the vast knowledge of Wikipedia.
<em>Other people are way smarter than me</em> and whatnot. But while you might not be
able to publish worthy edits to a well-known topic, you might know some things
that others haven&#39;t thought of. Is there an entry about your local town? Is
there an interesting member of your (past) family that others might want to read
about?</p>

<p>Of course, there are other wikis beside Wikipedia. Are you using a little-known
tool that has open source documentation in the form of a wiki? How can it be
improved?</p>

<h2>Observation</h2>

<p>You might have never heard of <a href="https://observation.org">observation.org</a>. It&#39;s
an open biodiversity- and nature-database. I just recently learned about them in
our local museum. They had a special exhibition about insects, and called out
for contributions to map out our local flora and fauna.</p>

<p>The idea is simple: snap a picture of an interesting looking insect or plant,
upload it using the website (or one of their apps) and create an &quot;observation&quot;.
Using this information, researchers will be able to understand the biodiversity
of your area. The information is free to use, and anyone can contribute!</p>

<h2>Wardriving</h2>

<p>Wardriving is a fun and useful way to contribute to open source knowledge. By
driving around with a device that can detect and record wireless networks, you
can help to map out the wireless coverage in your area. This information can be
used by researchers, network operators, and other interested parties to
understand the availability and quality of wireless networks.</p>

<p>One popular tool for wardriving is <a href="https://wigle.net/">WiGLE</a>. WiGLE allows you
to easily collect and share information about wireless networks, and contribute
to the global wireless map. To get started with WiGLE, you will need a device
that can detect and record wireless networks. This can be a smartphone, laptop,
or dedicated wardriving device. You will also need to download and install the
WiGLE app, and some basic knowledge of how to use it.</p>

<p>Once you have set up WiGLE, you can start driving around and mapping out the
wireless networks in your area. As you collect data, it will be automatically
uploaded to the WiGLE database, where it can be used by researchers and other
interested parties. Wardriving with WiGLE is a fun and easy way to help advance
scientific research and understanding.</p>

<h2>folding@home</h2>

<p>Another way to contribute to open source knowledge is to participate in the
<a href="https://foldingathome.org/">folding@home</a> project. folding@home is a
distributed computing project that uses the idle processing power of volunteers&#39;
computers to perform scientific calculations and simulations. These calculations
are used to study a wide range of topics, including protein folding, drug
design, and the origins of the universe.</p>

<p>By joining the folding@home network, you can help to advance scientific research
and discovery. The project is open to anyone, and you can participate using your
personal computer, laptop, or even your smartphone. All you need to do is
download and install the folding@home software, and then select the types of
calculations that you want to contribute to.</p>

<p>The folding@home project is a great way to put your idle computing power to good
use, and to contribute to the global effort to advance scientific knowledge. To
learn more, visit the <a href="https://foldingathome.org/">folding@home website</a>.</p>

<h2>Blog posts</h2>

<p>Writing a blog post is a fun and engaging way to contribute to open source
knowledge. You don&#39;t need to be a professional writer or have a formal writing
style. Just jot down some notes about a topic that you are passionate about, and
share your experiences and expertise with others.</p>

<p>Not only will you be helping others to learn from your experiences, but writing
a blog post can also be beneficial for yourself. Capturing your thoughts and
ideas in writing can help you to better understand and organize your own
knowledge. It can also be a great way to reflect on your experiences and to
learn from your successes and failures.</p>

<p>If you&#39;re interested in blogging, you might want to check out the
<a href="https://100daystooffload.com/">100DaysToOffload</a> project!</p>

<h1>Wrapping up</h1>

<p>As you can see, there are many ways that you can contribute to open source
knowledge, even if you don&#39;t have a lot of time or expertise. By participating
in projects like OpenStreetMap, Wikipedia, observation.org, and folding@home, or
by sharing your experiences and expertise through blog posts, you can make a
real difference in the community.</p>

<p>Why not give it a try? You might be surprised by how much you can learn and how
much you can help others. And who knows, you might even have some fun along the
way! Thanks for reading, and happy contributing!</p>

<p>This is post 044 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Smart Move, Google
            </title>
            <link>
                https://garrit.xyz/posts/2022-11-24-smart-move-google?utm_source=rss
            </link>
            <pubDate>
                Thu, 24 Nov 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>For as long as I can remember, <code>maps.google.com</code> was the defacto domain for
Google Maps. Also for as long as I can remember, I allowed this domain to use
the location services of my browser.</p>

<p>Yesterday I was asked to allow the usage of location services for Google Maps
seemingly out of nowhere. Of course I accepted. After all, I just wanted to
check a route to a local business and I was in a hurry. Back home I opened
Google Maps again, and noticed that <code>maps.google.com</code> now redirects to
<code>google.com/maps</code>. This implies that the permissions I give to Google Maps now
apply to <strong>all</strong> of Googles services hosted under this domain. So far I only
identified Google Flights to have made the same switch (<code>google.com/flights</code>),
though I&#39;m sure they&#39;re just beginning to transfer their services to the main
<code>google.com</code> domain.</p>

<p>Congratulations, you now have permission to geo-track me across <strong>all</strong> of your
services.</p>

<p>Smart move, Google.</p>

<p>This is post 043 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>

<hr/>

<p>This post generated some interesting discussions on
<a href="https://news.ycombinator.com/item?id=33729345">HackerNews</a>.</p>

<h3>Backlinks</h3>

<ul><li><a href="https://analyticsindiamag.com/google-bypasses-privacy-puts-users-data-on-the-map/">Google Bypasses Privacy, Puts Usersâ€™ Data on the Map</a></li><li><a href="https://open.spotify.com/episode/2EfB2yqlh7B62701mzc82v">Last Week in Local - December 5, 2022</a></li><li><a href="https://softantenna.com/blog/google-smart-move/">Softantenna</a> (<a href="https://softantenna-com.translate.goog/blog/google-smart-move/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=de&amp;_x_tr_pto=wapp">English</a>)</li><li><a href="https://stadt-bremerhaven.de/google-kann-euren-standort-unter-umstaenden-mit-allen-services-verfolgen/">Google kann euren Standort unter UmstÃ¤nden mit allen Services verfolgen</a> (<a href="https://stadt--bremerhaven-de.translate.goog/google-kann-euren-standort-unter-umstaenden-mit-allen-services-verfolgen/?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=de&amp;_x_tr_pto=wapp">English</a>)</li><li><a href="https://www.zive.cz/clanky/google-vymyslel-figl-jak-nas-plosne-sledovat-stacilo-mapam-zmenit-adresu/sc-3-a-219564/default.aspx">zive.cz</a> (<a href="https://www-zive-cz.translate.goog/clanky/google-vymyslel-figl-jak-nas-plosne-sledovat-stacilo-mapam-zmenit-adresu/sc-3-a-219564/default.aspx?_x_tr_sl=auto&amp;_x_tr_tl=en&amp;_x_tr_hl=de&amp;_x_tr_pto=wapp">English</a>)</li></ul>]]>
            </description>
        </item>
        <item>
            <title>
                The only true answer to 'tabs vs spaces'
            </title>
            <link>
                https://garrit.xyz/posts/2022-06-29-the-only-true-answer-to-tabs-vs-spaces?utm_source=rss
            </link>
            <pubDate>
                Wed, 29 Jun 2022 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I recently dove into a new project at work. We&#39;re starting from a blank page,
so of course this classic question came up:</p>

<blockquote><p>&quot;So should we use tabs or spaces for our formatting?&quot;</p></blockquote>

<p>One of my teammates explained to us why the only logical answer to this is
&quot;Tabs&quot;, and you&#39;ll soon know why.</p>

<h2>The problem</h2>

<p>Most formatters, by default, use either two or four spaces for indentation by
default. The <a href="https://prettier.io/">Prettier</a> formatter does this, and it
somewhat became the norm for JavaScript projects. This has one huge downside
though: everyone on the team has to agree, or live with this standard.</p>

<p>Nowadays, almost all editors come with the ability to change the preferred
indentation settings, which will be overridden by the settings of the
formatter. I prefer an indentation of 4 spaces, which is reflected in all of my
code. If I&#39;m working on a project that uses an indentation of 2 spaces via
prettier, my preference will be overridden when formatting the code.</p>

<h2>Just use tabs</h2>

<p>The solution to this problem is simple: Create a <code>.editorconfig</code> file and set
the indentation style to tab, without a width:</p>

<p><code></code>`editorconfig
root = true</p>

<p>[*]
end<em>of</em>line = lf
charset = utf-8
indent_style = tab
<code></code>`</p>

<p>Almost all editors will be able to pick this file up and configure some
project-wide settings. If your editor is configured to use a indent width of 4,
this setting will be respected. If you&#39;re a maniac that indents their code with
8 spaces, you&#39;ll be pleased to see that you can finally use this style in your
code, without forcing anyone else to do as you do.</p>

<p>Even GitHub, GitLab and friends are able to respect this setting, giving
everyone the opportunity to view code in their preferred style.</p>

<p>I hope you now know why using a single tab of indentation makes the most sense if
you&#39;re working in a team. Let me know your thoughts!</p>

<p>This is post 035 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
    </channel>
</rss>