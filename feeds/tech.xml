<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Thu, 11 Apr 2024 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                A simple search bar
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-11-a-simple-search-bar
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-11-a-simple-search-bar?utm_source=rss
            </link>
            <pubDate>
                Thu, 11 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just added a simple search bar to my <a href="/links">&quot;More ...&quot;</a> page. It just redirects to a <a href="https://duckduckgo.com">DuckDuckGo</a> search with your search term and limits it to my site. Simple, yet effective!</p>

<p>Here&#39;s the snippet, feel free to steal it for your own site:</p>

<p><code>jsx
&lt;form className=&quot;search&quot; method=&quot;get&quot; action=&quot;https://duckduckgo.com/&quot; target=&quot;_blank&quot;&gt;
    &lt;input id=&quot;search&quot; type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search via DDG&quot; /&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;sites&quot; value=&quot;garrit.xyz&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&lt;/form&gt;
</code></p>

<h2>Try it out</h2>

<p>Try searching for anything!</p>

<p>&lt;form className=&quot;search&quot; method=&quot;get&quot; action=&quot;https://duckduckgo.com/&quot; target=&quot;_blank&quot;&gt;
    &lt;input id=&quot;search&quot; type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search via DDG&quot; /&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;sites&quot; value=&quot;garrit.xyz&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&lt;/form&gt;</p>]]>
            </description>
        </item>
        <item>
            <title>
                Pandoc: Convert links to footnotes (the easy way)
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-04-pandoc-convert-links-to-footnotes-the-easy-way
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-04-pandoc-convert-links-to-footnotes-the-easy-way?utm_source=rss
            </link>
            <pubDate>
                Thu, 04 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Pandoc has <a href="https://pandoc.org/MANUAL.html#links">a feature</a> to covert links to footnotes. Unfortunately, this only applies to LaTeX documents. Since I want to stay away from LaTeX for reasons of bloat, I was looking for a more universal approach.</p>

<p>First, I encountered <a href="https://stackoverflow.com/questions/33900067/pandoc-filter-to-add-footnotes-to-links">this</a> thread suggesting to use a regular <a href="https://pandoc.org/filters.html">Pandoc filter</a>. This has one downside though: you need a Haskell toolchain on your system. So I moved on ... </p>

<p>I eventually stumbled across <a href="https://github.com/jgm/pandoc/discussions/9415">this</a> thread, explaining how to do the same thing but with a Lua filter instead of Haskell. Since Lua is embedded into Pandoc, you don&#39;t need to install anything. Hooray for embeddable languages!</p>

<p>Simply place the following snippet into file (<code>/filters/link-to-footnote.lua</code> for example):</p>

<p><code>lua
function Link(link)
    link.content:insert(pandoc.Note(link.target))
    return link.content
end
</code></p>

<blockquote><p><em>Note</em>: If you want to keep the original hyperlink in tact, replace the <code>return link.content</code> with <code>return link</code>.</p></blockquote>

<p>And add the following flag to your Pandoc build command:</p>

<p><code></code>`sh</p>

<h1>!/bin/sh</h1>

<p>pandoc text.md
    -o book.epub \
    --lua-filter=filters/link-to-footnote.lua \ # &lt;-- This one
    --metadata-file metadata.yaml \
    --standalone \
    # ...
<code></code>`</p>

<p>After compiling the document, you should now see that each link has a footnote with the link text.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Fuck trees, use tags
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-02-fuck-trees-use-tags
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-02-fuck-trees-use-tags?utm_source=rss
            </link>
            <pubDate>
                Tue, 02 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>We&#39;ve been trained to organize our files into a tree-like structure. A file can only exist once in the entire tree. It may have multiple contexts, but it can only exist once. Here&#39;s an example: you get a really important invoice for your car that you have to keep for your taxes. Where do you store this invoice alongside your other files?</p>

<ul><li>Maybe organized by type:<code>/invoices/important_invoice.pdf</code>?</li><li>Or <code>/tax/2024/important_invoice.pdf</code> since that&#39;s where you will probably need it next?</li><li>But it&#39;s an invoice for my car! So <code>/vehicles/&lt;licenseplate&gt;/important_invoice.pdf</code>?</li></ul>

<p>Whatever strategy you choose, there are probably times where you wish to have used a different directory structure. Sure, you can put the file in one directory and then create a shortcut or link in the other directories, but the original file will only ever exist in one place.</p>

<p>I believe that these tree-like directory structures are inherently flawed, and that tagging systems are superior in almost every way.</p>

<p>What I mean by tags is to organize files/entities/whatever into a flat structure and add meaningful tags/labels to add context. To revise the example above: our <code>important_invoice.pdf</code> could have the following tags:</p>

<ul><li><code>invoice</code></li><li><code>vehicles/&lt;licenseplate&gt;</code></li><li><code>tax/2024</code></li></ul>

<p>One could argue that <code>vehicles</code> and <code>tax</code> could be their own tags, but I specifically choose these tags to prove an important point:</p>

<h2>Tags can mimic trees</h2>

<p>If you think about it, a file path in a sense is just a reference to some location. Files on a physical hard drive aren&#39;t organized in trees. They&#39;re a bunch of ones and zeros slapped together in a pool of other files. A file path is just an abstraction for the user to reference a specific location in this pool of files. A file path is a tag!</p>

<p>Unfortunately, most systems are designed to only allow one path per file. This creates the hierarchical structure we so often use. But as I mentioned above, we could simply assign multiple tags or paths to a single file to organize it in multiple ways. The <code>important_invoice.pdf</code> has little to do with <code>tax</code> or <code>2024</code> as standalone terms, but assigning the tag <code>tax/2024</code>  gives it a similar meaning as a path to a file in a directory. The term <code>invoice</code> is enough to infer that everything using this tag is an invoice. It&#39;s equivalent to having a directory named <code>invoices</code> with multiple files inside.</p>

<p>So, we have established that tags are easily superior to trees. Why are we not using them?</p>

<h2>Tags have bad UX</h2>

<p>There have been many attempts at giving users the possibility to organize their stuff using tags. Your Gmail mails can be labeled, you can use tags for files in MacOS and there are apparently even efforts to create <a href="https://relfs.sourceforge.net/">tag-based filesystems</a>. But none of them were good enough to change the game.</p>

<p>Our brains seem to be so used to the idea of a piece of information only existing at one location at a time that it&#39;s really hard to adapt at this point. I&#39;m sure there are some power users out there who make the most of the limited tagging features of their systems, but what I would really like to see is a real shift in how we store and retrieve information.</p>

<h2>Discussion</h2>

<p>This post has spark some interesting discussion on <a href="https://lobste.rs/s/pssbmx/fuck_trees_use_tags">Lobsters</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Cost per Request
            </title>
            <guid>
                https://garrit.xyz/posts/2024-01-18-cost-per-request
            </guid>
            <link>
                https://garrit.xyz/posts/2024-01-18-cost-per-request?utm_source=rss
            </link>
            <pubDate>
                Thu, 18 Jan 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>When monitoring infrastructure, we often use metrics like &quot;Requests per second&quot; or &quot;Time per request&quot;.</p>

<p>Contrary to that, when monitoring the cost of our infrastructure, we often only review the cloud bill at the end of the month and tell ourselves that those costs are justified for our product.</p>

<p>What if we made &quot;Cost per request&quot; a key metric in our observability strategy, alongside &quot;Requests per second&quot;?</p>

<p>If we follow that path even further, we could derive a standard for how much a request should cost for x% of uptime, across the entire industry. This way, we should be able to identify how much we&#39;re overspending for our infrastructure compared to other companies or products.</p>]]>
            </description>
        </item>
        <item>
            <title>
                A better publishing workflow for static blogs
            </title>
            <guid>
                https://garrit.xyz/posts/2024-01-06-a-better-publishing-workflow-for-static-blogs
            </guid>
            <link>
                https://garrit.xyz/posts/2024-01-06-a-better-publishing-workflow-for-static-blogs?utm_source=rss
            </link>
            <pubDate>
                Sat, 06 Jan 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>In my <a href="/posts/2023-12-23-100daystooffload-i-made-it">post</a> celebrating the completion of my <code>#100DaysToOffload</code> challenge, I teased that &quot;I built myself a handy script that turns the contents of a GitHub issue into a pull request, ready to be merged as a blog post&quot;. I didn&#39;t believe this was such a big deal, but a couple of readers actually reached out to me to ask about this.</p>

<p>First, some background. My site is built using a static site generator (not that it matters, but I use <a href="https://nextjs.org/">Next.js</a>). The beauty of using a SSG is that every blog post is literally just a markdown file in <a href="https://github.com/garritfra/garrit.xyz/tree/main/content/posts">a directory</a>. </p>

<h2>The story so far</h2>

<p>Before coming up with an automation, I had to</p>

<ol><li>Copy an older post to a new file</li><li>Rename the file</li><li>Fix the metadata/frontmatter</li><li>Delete the contents of the post</li><li><strong>Write the actual post</strong></li><li>Commit the file</li></ol>

<p>Putting out content on my blog involved quite a bit of friction. I felt like there was a barrier between my thoughts and the blog.</p>

<h2>The solution</h2>

<p>I&#39;ve been looking into how I could solve this issue for quite some time. I even had thoughts to build a custom blogging backend that would commit files to the <a href="https://github.com/garritfra/garrit.xyz">repository</a>, which is of course quite silly.</p>

<p>But then it struck me: GitHub issues fully support markdown! The idea was born:</p>

<ol><li>Open an issue in the repository of this blog</li><li>Write the post</li><li>Kick off an automation that takes the content of the issue and dumps it in a new file</li><li>Create a pull request to generate a preview of the post</li><li>Merge the PR once I&#39;m done reviewing the post</li></ol>

<h2>So, how does the automation work?</h2>

<p>The magic lies in <a href="https://github.com/garritfra/garrit.xyz/blob/main/.github/workflows/publish_via_issue.yaml">this GitHub Action</a>. It is kicked off whenever the <code>action:publish</code> label is added to an issue.</p>

<p>If for some reason this link will not be there anymore in the future, this is the action as of the time of writing:</p>

<p>&lt;details&gt;
&lt;summary&gt;Expand me!&lt;/summary&gt;</p>

<p><code></code>`yaml
on:
  issues:
    types: [labeled]</p>

<p>name: Publish issue as post
jobs:
  publish-issue:
    if: github.event.label.name == &#39;action:publish&#39;
    runs-on: ubuntu-latest
    env:
      POST<em>BODY: &#39;${{ github.event.issue.body }}&#39;
    steps:
      - uses: actions/checkout@v4
      - name: Create commits
        run: |
          export POST</em>DATE=$(date +&quot;%Y-%m-%d&quot;)
          export POST<em>TITLE=&quot;${{ github.event.issue.title }}&quot;
          export POST</em>TAGS=$(echo &quot;${{ join(github.event.issue.labels.<em>.name, &#39;, &#39;) }}&quot; | grep -o &#39;tag:[^,]</em>&#39; | cut -d: -f2- | paste -sd &quot; &quot; - | sed &#39;s/ /, /g&#39;)
          export FILE<em>TITLE=$(printf &quot;$POST</em>TITLE&quot; | tr -cs &#39;[:alnum:]&#39; &#39;-&#39; | tr &#39;A-Z&#39; &#39;a-z&#39; | sed &#39;s/--/-/g&#39; | sed &#39;s/^-\|-$//g&#39;)
          export FILE<em>NAME=&quot;$POST</em>DATE-$FILE<em>TITLE.md&quot;
          export FULL</em>PATH=&quot;content/posts/$FILE_NAME&quot;
          git config user.name &#39;Publish Bot&#39;
          git config user.email &#39;publish-bot@github.com&#39;</p>

<pre><code>      cat &lt;&lt; EOF &gt; $FULL_PATH
      ---
      title: &quot;$POST_TITLE&quot;
      date: &quot;$POST_DATE&quot;
      tags: &quot;$POST_TAGS&quot;
      ---

      EOF

      echo &quot;$POST_BODY&quot; &gt;&gt; $FULL_PATH

      git add $FULL_PATH
      git commit -m &quot;Publish $POST_TITLE&quot;

  - name: Create Pull Request
    uses: peter-evans/create-pull-request@v5
    with:
      title: &quot;New Post: ${{ github.event.issue.title }}&quot;
      body: &quot;Closes #${{ github.event.issue.number }}.\n\n This PR has been generated automatically.&quot;
  - uses: actions-ecosystem/action-remove-labels@v1
    with:
      labels: action:publish</code></pre>

<p><code></code>`</p>

<p>&lt;/details&gt;</p>

<p>So, when I&#39;m done writing the post, I simply label the issue as <code>action:publish</code>, and the action turns it into a new file, commits it and ultimately opens a PR for me to review. You can see this in action by looking at <a href="https://github.com/garritfra/garrit.xyz/issues/432">the issue for this post</a>. The action also handles tags for blog posts. You can see that there are a bunch of labels on the issues that correspond to the tags of this post.</p>

<p>One additional benefit of using a static site generator is that I can generate a preview site for each pull request. So, once I&#39;m done writing and the pull request is generated, I can just wait for Netlify to build the preview to read the blog post as if it is published to the site! This is very helpful for spotting typos or formatting issues, especially if I&#39;m writing a post on my phone.</p>

<h2>Further improvements</h2>

<p>There are two things the current setup is lacking:</p>

<p>Firstly, GitHub doesn&#39;t really highlight typos when writing an issue. I&#39;m sure there are ways to address this post-publish, I just didn&#39;t get around to doing that yet.</p>

<p>Secondly, there&#39;s no sustainable way to add images to the repository this way. I have an <a href="https://github.com/garritfra/garrit.xyz/tree/main/public/assets">assets directory</a> where I put all my images for blog posts. You can paste images directly into the issue, which is really handy, but that generates a permalink on a GitHub CDN, somewhere that I don&#39;t control. For the future, it would be nice to teach the GH action to take these images and dump them into the asset directory.</p>

<h2>Conclusion</h2>

<p>Using this workflow, I can pump out ideas whenever and whereever I feel like it. It drastically reduced the time from idea to written article, which helps me organize my thoughts a lot better. I also frequently create drafts for things I want to write about but is not fully fleshed out yet.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Greg, the Developer
            </title>
            <guid>
                https://garrit.xyz/posts/2024-01-05-greg-the-developer
            </guid>
            <link>
                https://garrit.xyz/posts/2024-01-05-greg-the-developer?utm_source=rss
            </link>
            <pubDate>
                Fri, 05 Jan 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>This is Greg. Greg loves to play with his computer and create amazing things.</p>

<p><img alt="Greg" src="/assets/posts/2024-01-05-greg-the-developer/greg.svg"/></p>

<p>Greg has many friends. He listens to his friends and helps them. Greg knows that teamwork is very important.</p>

<p><img alt="Greg and his friends" src="/assets/posts/2024-01-05-greg-the-developer/greg-friends.svg"/></p>

<p>Greg is curious about what his friends do. Greg learned how they help everyone create amazing things. Greg was happy that he learned something new.</p>

<p><img alt="Greg learns from his friends" src="/assets/posts/2024-01-05-greg-the-developer/greg-learning.svg"/></p>

<p>One day, Greg has an idea. Greg shares his idea with his friends. They try it, and it works! Everyone is happy that Greg shared his idea.</p>

<p><img alt="Greg has an idea" src="/assets/posts/2024-01-05-greg-the-developer/greg-idea.svg"/></p>

<p>When Greg learns something new about computers, he writes it down and shows it to his friends. This helps everyone learn how computers work.</p>

<p><img alt="Greg writes down what he learned" src="/assets/posts/2024-01-05-greg-the-developer/greg-documentation.svg"/></p>

<p>Sometimes Greg and his friends make a mistake, but Greg knows that&#39;s okay. Everyone makes mistakes, even Greg. He says that everyone can learn from mistakes. This makes them better and happier.</p>

<p><img alt="It&#39;s okay to make mistakes" src="/assets/posts/2024-01-05-greg-the-developer/greg-mistake.svg"/></p>

<p>Greg is a good software developer. Be like Greg.</p>

<p><img alt="Greg is a good software developer" src="/assets/posts/2024-01-05-greg-the-developer/greg-okay.svg"/></p>]]>
            </description>
        </item>
        <item>
            <title>
                Linkdump #2
            </title>
            <guid>
                https://garrit.xyz/posts/2023-12-28-linkdump-2
            </guid>
            <link>
                https://garrit.xyz/posts/2023-12-28-linkdump-2?utm_source=rss
            </link>
            <pubDate>
                Thu, 28 Dec 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>A while back <a href="/posts/2023-09-11-linkdump-software-development">I did a linkdump</a> to get some links out of my system that deserve some special attention. Since my &quot;to read&quot; list is filling up once again, I decided to do another link dump. I hope you find these articles as interesting as I do!</p>

<ul><li><a href="https://dubroy.com/blog/cold-blooded-software/">Cold-blooded software</a> - On maintainability and simplicity</li><li><a href="https://www.industriallogic.com/blog/discovery-trees/">Working With Discovery Trees</a> - An interesting alternative to the Kanban-Board</li><li><a href="https://www.berkansasmaz.com/every-programmer-should-know-idempotency/">Every Programmer Should Know #1: Idempotency</a> - The title says it all</li><li><a href="https://blog.alexewerlof.com/p/broken-ownership">6 Archetypes of Broken Ownership</a> - Responsibilities in a DevOps environment</li><li><a href="https://read.engineerscodex.com/p/how-pinterest-scaled-to-11-million">How Pinterest scaled to 11 million users with only 6 engineers</a> - On going from simple, to complex, and back to simple</li><li><a href="https://iximiuz.com/en/posts/on-software-design-and-good-writing/">On Software Design... and Good Writing</a> - Essentially <a href="https://spacecraft.ssl.umd.edu/akins_laws.html">this amazing post</a> with additional notes for software developers</li><li><a href="https://andreasjhkarlsson.github.io//jekyll/update/2023/12/27/4-billion-if-statements.html">4 billion if statements</a> - A fun analysis of a silly solution to a simple problem. Teaches critical thinking</li></ul>]]>
            </description>
        </item>
        <item>
            <title>
                10.000 Hours
            </title>
            <guid>
                https://garrit.xyz/posts/2023-12-22-10-000-hours
            </guid>
            <link>
                https://garrit.xyz/posts/2023-12-22-10-000-hours?utm_source=rss
            </link>
            <pubDate>
                Fri, 22 Dec 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>In his book <a href="https://en.m.wikipedia.org/wiki/Outliers_(book)">Outliers</a>, Malcolm Gladwell popularized the idea that it takes 10.000 hours of concentrated practice to master a skill.</p>

<p>According to my <a href="https://wakatime.com">WakaTime</a> stats, I spent 2.384 hours writing code in an editor (December 2023). If you&#39;re reading this post in the future, this is my current record:</p>

<p><a href="https://wakatime.com/@811525e7-5cc5-4eef-9e29-3cece3a03847"><img alt="wakatime" src="https://wakatime.com/badge/user/811525e7-5cc5-4eef-9e29-3cece3a03847.svg"/></a></p>

<p>This time is the time actually spent writing code. It doesn&#39;t track the time reading or thinking about it, nor the time spent in editors without the WakaTime plugin. It&#39;s hard to say how much time I spent engulfed in code, but this number is a good indicator as to how far I&#39;ve come in my programming journey.</p>

<p>I believe we should never say that we&#39;ve &quot;mastered&quot; a craft, even after spending 10.000 hours practicing it. There are always so many things to learn, so many novel ideas to catch up with.</p>

<p>So far, each of my 7 years of working as a software developer has advanced me tremendously. I&#39;m curious to see where I am once I reach 10.000 hours of practice.</p>

<hr/>

<p>This is post 099 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Notes on "Immutability Changes Everything"
            </title>
            <guid>
                https://garrit.xyz/posts/2023-12-21-notes-on-immutability
            </guid>
            <link>
                https://garrit.xyz/posts/2023-12-21-notes-on-immutability?utm_source=rss
            </link>
            <pubDate>
                Thu, 21 Dec 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<blockquote><p>Published books are immutable. Accountants don&#39;t use erasers or they go to jail.</p></blockquote>

<p>The paper <a href="https://www.cidrdb.org/cidr2015/Papers/CIDR15_Paper16.pdf">Immutability Changes Everything</a> by Pat Helland talks about the trend towards immutability in data storage thoughout all layers of the stack. From append-only apps (Record changes, then derive the current state), down to how bits are stored on a hard drive (e.g. Copy on Write).</p>

<p>I stumbled upon this paper through the <a href="https://paperswelove.org/">Papers We Love</a> collection. I was specifically looking for a paper that&#39;s short and easy to comprehend, since I don&#39;t have much experience in reading scientific papers. This is absolutely both short and easy to comprehend. If you&#39;re a beginner like me, I can highly recommend this one to you.</p>

<p>Key takeaways:</p>

<ul><li>Immutability enables clean replication</li><li>Change logs (e.g. <a href="https://en.wikipedia.org/wiki/Write-ahead_logging">write-ahead logs</a>) are the source of truth. The database is a cache of a subset of those change logs</li><li>It&#39;s okay to consider violating <a href="https://en.wikipedia.org/wiki/Database_normalization">normalization</a> rules to trade storage cost for read speed</li><li>Modern SSDs minimize wear by storing new versions of data to other blocks instead of mutating the data in place</li><li>The cost of immutability is increased storage</li></ul>

<hr/>

<p>This is post 098 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Real vs. Fake Trends
            </title>
            <guid>
                https://garrit.xyz/posts/2023-11-29-real-vs.-fake-trends
            </guid>
            <link>
                https://garrit.xyz/posts/2023-11-29-real-vs.-fake-trends?utm_source=rss
            </link>
            <pubDate>
                Wed, 29 Nov 2023 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>The most important indicator to figure out if an emerging trend will be successful is to ask yourself if people tell their friends about it.</p>

<p>To figure out if a product/market will live through the hype-cycle and succeed in the long run, see if the people are actually <strong>using it</strong> obsessively.</p>

<p>When the iPhone first came out, it barely sold any units compared to the big players at the time. But it succeeded because people who owned an iPhone used it for hours every day.</p>

<p>VR on the other hand gained a lot of traction in the press, but despite telling their friends about it, hardly anyone owning a VR headset actually uses it (I use mine about once a month).</p>

<p><strong>Source</strong>: <a href="https://youtu.be/0lJKucu6HJc?si=HwIpCJ3g0uqwmtQf">Sam Altman - How to Succeed with a Startup</a></p>

<hr/>

<p>This is post 089 of <a href="https://100daystooffload.com/">#100DaysToOffload</a>.</p>]]>
            </description>
        </item>
    </channel>
</rss>