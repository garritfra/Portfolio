<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            garrit.xyz
        </title>
        <link>
            https://garrit.xyz
        </link>
        <description>
            Garrit Franke
        </description>
        <language>
            en
        </language>
        <lastBuildDate>
            Sat, 03 Aug 2024 00:00:00 +0000
        </lastBuildDate>
        <item>
            <title>
                How embedding models encode semantic meaning
            </title>
            <guid>
                https://garrit.xyz/posts/2024-08-03-how-embedding-models-encode-semantic-meaning
            </guid>
            <link>
                https://garrit.xyz/posts/2024-08-03-how-embedding-models-encode-semantic-meaning?utm_source=rss
            </link>
            <pubDate>
                Sat, 03 Aug 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Embedding models have long been a daunting concept for me. But what are they? And why are they so useful? Let&#39;s break it down in simple terms.</p>

<h2>What&#39;s an embedding?</h2>

<p>An embedding is basically a numerical representation of a piece of information - it could be text, audio, an image, or even a video. Think of it as a way to capture the essence or meaning of that information in a list of numbers.</p>

<p>For example, let&#39;s say we have this text: &quot;show me a list of ground transportation at boston airport&quot;. An embedding model might turn that into something like this:</p>

<p><code>
[0.03793335, -0.008010864, -0.002319336, -0.0110321045, -0.019882202, -0.023864746, 0.011428833, -0.030349731, -0.044830322, 0.028289795, -0.02810669, -0.0032749176, -0.04208374, -0.0077705383, -0.0033798218, -0.06335449, ... ]
</code></p>

<p>At first, thus looks like a jumble of numbers. But each of these numbers points to a specific area within the embedding model&#39;s &quot;space&quot;, where similar words or concepts might be located.</p>

<h2>Visualizing embeddings</h2>

<p>To help wrap our heads around this, let&#39;s look at a visualization. This beautiful image shows the entirety of the <a href="https://huggingface.co/nomic-ai/nomic-embed-text-v1.5">nomic-embed-text-v1.5</a> embedding model:</p>

<p><img alt="images.jpeg" src="https://github.com/user-attachments/assets/72c81f15-c2e8-4ee9-b2ac-c28445de61af"/></p>

<p>Now, if we take our example text about Boston airport transportation and plot its embeddings on this map, we&#39;d see them clustered around areas where similar terms about &quot;roads&quot; and &quot;transportation&quot; are located. It looks something like this:</p>

<p><img alt="Screenshot_20240803-114914.png" src="https://github.com/user-attachments/assets/cf4c9fb9-8d69-4a9d-87cc-e9257b04b4bf"/></p>

<p>In a nutshell, embedding models are able to group terms that are related to each other.</p>

<h2>Why should we care about embeddings?</h2>

<p>Encoding meaning in text has tons of different use cases. One that I&#39;m particularly excited about is building RAG applications. RAG stands for Retrieval-Augmented Generation and refers to a method for Large Language Models (LLMs), where, given a question, you enrich the original question with relevant bits of information before answering it.</p>

<p>Here&#39;s how embeddings are useful for RAG:</p>

<ol><li>You have a bunch of documents in your data source.</li><li>You use an embedding model to turn each document into a list of numbers (like we saw earlier).</li><li>When someone asks a question, you also turn that question into a list of numbers.</li><li>Then, you find the documents whose number lists are most similar to your question&#39;s number list.</li><li>Voila! You&#39;ve found the most relevant documents to answer the question.</li></ol>

<p>This method is way better than previously used techniques like just searching for exact words in the documents. It&#39;s like the difference between having a librarian who only looks at book titles, and one who actually understands what the books are about.</p>

<h2>Other things you can do with embeddings</h2>

<p>Beyond RAG applications, embeddings are super useful for all sorts of things:</p>

<ol><li><strong>Smarter searches</strong>: Find related stuff even if the exact words don&#39;t match.</li><li><strong>Better recommendations</strong>: &quot;You liked this? You might also like these similar things!&quot;</li><li><strong>Language translation</strong>: Help computers understand that &quot;dog&quot; in English and &quot;perro&quot; in Spanish mean the same thing.</li><li><strong>Sentiment analysis</strong>: Figure out if someone&#39;s happy or grumpy based on their tweet.</li></ol>

<h2>Wrapping it up</h2>

<p>Embeddings are a clever way to turn words (or images, or sounds) into numbers that computers can understand and compare. By doing this, we can make emerging AI technologies a whole lot smarter at understanding language and finding connections between ideas.</p>

<p>Next time you&#39;re chatting with an AI or getting scarily accurate recommendations online, you can nod knowingly and think, &quot;Ah yes, embeddings at work!&quot;</p>]]>
            </description>
        </item>
        <item>
            <title>
                ðŸ”— Linkdump: LLMs
            </title>
            <guid>
                https://garrit.xyz/posts/2024-07-02-linkdump-llms
            </guid>
            <link>
                https://garrit.xyz/posts/2024-07-02-linkdump-llms?utm_source=rss
            </link>
            <pubDate>
                Tue, 02 Jul 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>The more I&#39;m getting into large language models (LLMs), the more I&#39;m fascinated about what you can do with them. To &quot;digest&quot; my reading list of cool articles and projects regarding LLMs, I assembled the following list. If you&#39;re also interested but haven&#39;t started your journey into this neverending rabbit hole, these may contain some good pointers:</p>

<h2>Running LLMs</h2>

<ul><li><a href="https://ollama.com/">Ollama</a> - Host different LLMs locally (extremely easy!)</li><li><a href="https://docs.vllm.ai">vLLM</a> - Like Ollama but more scalable and production-ready</li><li><a href="https://github.com/Mozilla-Ocho/llamafile">llamafile</a> - LLMs as a single, portable binary</li></ul>

<h2>Building Chatbots &amp; Applications</h2>

<ul><li><a href="https://www.llamaindex.ai/">LlamaIndex</a> - Framework for building LLM applications</li><li><a href="https://github.com/run-llama/create-llama/">create-llama</a> - LlamaIndex template generator (perfect for if you don&#39;t know how to structure your app)</li><li><a href="https://www.langchain.com/">LangChain</a> - Like LlamaIndex with a less clean interface IMO</li><li><a href="https://haystack.deepset.ai/overview/intro">Haystack</a> - Another LLM framework. Haven&#39;t tested it though</li><li><a href="https://sdk.vercel.ai/docs/introduction">Vercel AI SDK</a> - For integrating your LLM app into a web frontend</li></ul>

<h2>Training and finetuning</h2>

<ul><li><a href="https://huggingface.co/">HuggingFace</a> - GitHub but for LLMs</li><li><a href="https://medium.com/data-science-in-your-pocket/lora-for-fine-tuning-llms-explained-with-codes-and-example-62a7ac5a3578">LoRA for Fine-Tuning LLMs explained with codes and example</a> - Great LoRA Primer</li><li><a href="https://huggingface.co/autotrain">AutoTrain</a> - NoCode LLM finetuning</li><li><a href="https://github.com/georgian-io/LLM-Finetuning-Toolkit">llm-toolkit</a> - Another finetuning framework</li><li><a href="https://mlflow.org/">MLFlow</a> - End to End platform for LLM training</li></ul>

<h2>Miscellaneous projects</h2>

<ul><li><a href="https://github.com/iyaja/llama-fs">llama-fs</a> - Self-organinizing filesystem</li><li><a href="https://github.com/ask-fini/paramount">paramount</a> - Measure agent accuracy</li></ul>

<h2>Blogs</h2>

<ul><li><a href="https://simonwillison.net/tags/llms/">Simon Willison</a> - Awesome posts from a LLM enthusiast</li><li><a href="https://matt-rickard.com/tags/ai">Matt Richard</a> - Matt is currently inactive, but his blog is a treasure trove</li></ul>]]>
            </description>
        </item>
        <item>
            <title>
                Testing SMTP connections
            </title>
            <guid>
                https://garrit.xyz/posts/2024-06-27-testing-smtp-connections
            </guid>
            <link>
                https://garrit.xyz/posts/2024-06-27-testing-smtp-connections?utm_source=rss
            </link>
            <pubDate>
                Thu, 27 Jun 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Just a quick note to my future self on how to test a SMTP connection with nothing but a tiny busybox container.</p>

<p>In my case specifically, I tested the connection from inside a Kubernetes cluster. Here&#39;s the quickest way to get a temporary pod up and running:</p>

<p><code>
kubectl run -n backend -i --tty --rm debug --image=busybox --restart=Never
</code></p>

<p>Busybox comes with telnet installed, which we can use to establish a connection to the server:</p>

<p><code>
/ # telnet smtp.mydomain.com 25
Connected to smtp.mydomain.com
220 mail.mydomain.com ESMTP Postfix (SMTP)
</code></p>

<p>Next, we can issue the SMTP commands through the open TCP connection to send a test mail. Lines beginning with a status code are server responses:</p>

<p><code></code>`
HELO smtp.mydomain.com
250 smtp.mydomain.com
MAIL FROM:<a href="mailto:noreply@mydomain.com">noreply@mydomain.com</a>                       <br/>250 2.1.0 Ok
RCPT TO:<a href="mailto:receiver@foo.com">receiver@foo.com</a>
250 2.1.5 Ok
DATA<br/>354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
From: [noreply] <a href="mailto:noreply@mydomain.com">noreply@mydomain.com</a>
To: [Receiver] <a href="mailto:receiver@foo.com">receiver@foo.com</a>
Date: Thu, 27 Jun 2024 10:08:26 -0200
Subject: Test Message</p>

<p>This is a test message.</p>

<p>.
250 2.0.0 Ok: queued as 2478B7F135
<code></code>`</p>

<p>In case there&#39;s a firewall issue, you might not be able to establish a connection in the first place, or you won&#39;t get a reply to your TCP commands. In our case, everything worked fine.</p>

<p>I hope this is useful!</p>]]>
            </description>
        </item>
        <item>
            <title>
                Host your own LLM
            </title>
            <guid>
                https://garrit.xyz/posts/2024-06-17-host-your-own-llm
            </guid>
            <link>
                https://garrit.xyz/posts/2024-06-17-host-your-own-llm?utm_source=rss
            </link>
            <pubDate>
                Mon, 17 Jun 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I&#39;m currently dipping my toes into Large Language Models (LLMs, or &quot;AI&quot;) and what you can do with them. It&#39;s a fascinating topic, so expect some more posts on this in the coming days and weeks.</p>

<p>For starters, I wanted to document how I got my first LLM running on my local machine (a 2022 MacBook Pro). <a href="https://ollama.com/">Ollama</a> makes this process super easy. You just install it (<code>brew install ollama</code> in my case) and then run the model:</p>

<p><code>
ollama run llama3
</code></p>

<p>This will download the model and open a prompt, so you can start chatting right away!</p>

<p>You can think of Ollama as the <a href="https://www.docker.com/">Docker</a> CLI but for LLMs. There&#39;s a <a href="https://ollama.com/library">directory of LLMs</a>, and if a model has multiple different sizes, you can use it like you would pull a different docker tag:</p>

<p><code>
ollama pull llama3:8b
ollama pull llama3:70b
</code></p>

<p>The best thing about ollama is that it also exposes a web server for you to integrate the LLM into your application. As an example, here&#39;s how you would curl your local LLM:</p>

<p><code>
curl http://localhost:11434/api/chat -d &#39;{
    &quot;model&quot;: &quot;llama3&quot;,      
    &quot;messages&quot;: [{ &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Are you a robot?&quot; }],
    &quot;stream&quot;: false
}&#39;
{&quot;model&quot;:&quot;llama3&quot;,&quot;created_at&quot;:&quot;2024-06-17T11:19:23.510588Z&quot;,&quot;message&quot;:{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:&quot;I am not a human, but I&#39;m also not a traditional robot. I&#39;m an artificial intelligence language model designed to simulate conversation and answer questions to the best of my ability. My \&quot;brain\&quot; is a complex algorithm that processes natural language inputs and generates responses based on patterns and associations learned from large datasets.\n\nWhile I don&#39;t have a physical body or consciousness like humans do, I&#39;m designed to interact with humans in a way that feels natural and conversational. I can understand and respond to questions, make suggestions, and even tell jokes (though my humor may be a bit... algorithmic).\n\nSo, while I&#39;m not a human or a traditional robot, I exist at the intersection of technology and language, designed to assist and communicate with humans in a helpful way!&quot;},&quot;done_reason&quot;:&quot;stop&quot;,&quot;done&quot;:true,&quot;total_duration&quot;:12565842250,&quot;load_duration&quot;:7059262291,&quot;prompt_eval_count&quot;:15,&quot;prompt_eval_duration&quot;:331275000,&quot;eval_count&quot;:156,&quot;eval_duration&quot;:5172858000}
</code></p>

<p>If your local machine is not beefy enough and you want to try out a large LLM on a rented server (AWS has <code>g5.2xlarge</code>, which gave me good results for <code>mixtral 8x7b</code>), you also have to set <code>OLLAMA_HOST=0.0.0.0</code> in your environment variables to be able to reach the remote server. <strong>This exposes the LLM to the public internet, so be careful when chosing your deployment strategy.</strong></p>

<p>And there you go! You just deployed your very own LLM. Pretty cool, huh?</p>]]>
            </description>
        </item>
        <item>
            <title>
                I just cleaned up 40 GB of Brew caches
            </title>
            <guid>
                https://garrit.xyz/posts/2024-06-03-i-just-cleaned-up-40-gb-of-brew-caches
            </guid>
            <link>
                https://garrit.xyz/posts/2024-06-03-i-just-cleaned-up-40-gb-of-brew-caches?utm_source=rss
            </link>
            <pubDate>
                Mon, 03 Jun 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<blockquote><p><strong>EDIT</strong>: This trick will probably not be as effective on your system as it was on my system. After writing this post I realized that I had the <code>HOMEBREW_NO_INSTALL_CLEANUP=1</code> flag enabled on my system.</p></blockquote>

<p>My system (MacOS) is getting more cluttered the more I use it. I&#39;m sure you can relate. If you&#39;re using <a href="https://brew.sh/">Brew</a> as your package manager (which you should ðŸ˜‰), you might want to consider running the following command:</p>

<p><code>
brew cleanup -s
</code></p>

<p>For some reason this failed after some time with a &quot;directory not found&quot; error, but you can just run it again and it will continue cleaning up old caches. Once it was done, this freed up <strong>40 GB of disk space</strong> on my system. It might make sense to run this as a cronjob? Either way, I just wanted to jot this down before I enevitably forget this, as usual.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Going from self hosted to managed software
            </title>
            <guid>
                https://garrit.xyz/posts/2024-05-24-going-from-self-hosted-to-managed-software
            </guid>
            <link>
                https://garrit.xyz/posts/2024-05-24-going-from-self-hosted-to-managed-software?utm_source=rss
            </link>
            <pubDate>
                Fri, 24 May 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Some time ago I was heavily into <a href="https://garrit.xyz/posts/2022-09-26-self-hosted-software-im-thankful-for">self hosting my own software</a>. Over time though, it became apparent that maintaining these services is a huge burden. I either abandoned most of the services or found a replacement that suits my needs and saves me time that&#39;s better spent on other things in life.</p>

<p>Today, I finally pulled the plug on <a href="https://miniflux.app/">Miniflux</a>, the last service I used to self host (not counting House Assistant on a Pi, which I use to automate some stuff at home). The Hetzner server it ran on cost me ~4â‚¬ a month. The maintainer of Miniflux offers a managed hosting solution for 15$ a year, so to save money and time, and to support the project, I decided to switch from self-hosted to managed.</p>

<h2>Will I ever self host again?</h2>

<p>I really don&#39;t know. Some services (Miniflux included) required very little maintenance to keep running, so I could see myself spinning up a server again if I really wanted to run some software that doesn&#39;t have managed hosting. For now though, I&#39;m planning on using managed services wherever I can. Nevertheless I&#39;m proud of the things I learned during my time of self hosting my software. I think it gave me a huge boost both in terms of know how and my career, and I&#39;d encourage everyone to dip a toe into self hosting.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Beware of base64 encoded strings
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-15-beware-of-base64-encoded-strings
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-15-beware-of-base64-encoded-strings?utm_source=rss
            </link>
            <pubDate>
                Mon, 15 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just encountered a fun little bug that I thought is worth sharing.</p>

<p><strong>TL;DR</strong>: the base64 util breaks lines after a certain number of columns. Use a <a href="https://www.man7.org/linux/man-pages/man1/base64.1.html">flag</a> to specify &quot;don&#39;t break&quot;. Here&#39;s the commit that fixes the issue:</p>

<p>&lt;img width=&quot;1588&quot; alt=&quot;image (3)&quot; src=&quot;https://github.com/garritfra/garrit.xyz/assets/32395585/dba76692-c89f-44da-b70a-f6732a406d75&quot;&gt;</p>

<p>It started when we noticed that a cronjob that used wget to regularly call an endpoint failed on one specific environment. The endpoint uses <a href="https://en.wikipedia.org/wiki/Basic_access_authentication">Basic Auth</a>, which is essentially a header with a <a href="https://en.wikipedia.org/wiki/Base64">Base64</a> encoded representation of a username and password. <a href="https://curl.se/">Curl</a> has this functionality <a href="https://curl.se/docs/manpage.html#-u">built in</a>, but to keep the attack surface as small as possible, we decided to stick to <a href="https://www.gnu.org/software/wget/">wget</a>, which is part of busybox, to keep the container image size under 1 MB (!). After all, all we want to do is ping an endpoint.</p>

<p>This is the command we used up to this point:</p>

<p><code>
wget --post-data=&quot;&quot; -O - --header=&quot;Authorization: Basic $(echo -n $BASIC_AUTH_USERNAME:$BASIC_AUTH_PASSWORD | base64)&quot; http://endpoint:8080/v1/cache
</code></p>

<p>We noticed that the request worked fine on non-prod environments, but it failed on production with the following error:</p>

<p><code>
The HTTP header line [b2verlk1rwjsnutbcapkjh==] does not conform to RFC 7230. The request has been rejected.
</code></p>

<p>After digging around for a while and separating out the individual pieces of the commands, I noticed that the subcommand to build the header value (<code>echo -n $BASIC_AUTH_USERNAME:$BASIC_AUTH_PASSWORD | base64</code>) behaved differently on prod vs. non-prod. The password on prod is way longer compared to the other environments. Let&#39;s run this command with a short input:</p>

<p><code>sh
/ $ echo -n someuser:somepassword | base64
c29tZXVzZXI6c29tZXBhc3N3b3Jk
/ $
</code></p>

<p>And again with a long input:</p>

<p><code>sh
/ $ echo -n someuser:somepasswordthatswaylongerthanthefirstonebutalsoverysecureandsafe | base64
c29tZXVzZXI6c29tZXBhc3N3b3JkdGhhdHN3YXlsb25nZXJ0aGFudGhlZmlyc3RvbmVidXRhbHNv
dmVyeXNlY3VyZWFuZHNhZmU=
/ $
</code></p>

<p>Bingo! There&#39;s a rogue newline character in the output of <code>base64</code>. The fix is very straight-forward. Using the <code>-w0</code> <a href="https://www.man7.org/linux/man-pages/man1/base64.1.html">flag for base64</a>, we can force the output to be on the same line:</p>

<p><code>
/ $ echo -n someuser:somepasswordthatswaylongerthanthefirstonebutalsoverysecureandsafe | base64 -w0
c29tZXVzZXI6c29tZXBhc3N3b3JkdGhhdHN3YXlsb25nZXJ0aGFudGhlZmlyc3RvbmVidXRhbHNvdmVyeXNlY3VyZWFuZHNhZmU=
</code></p>

<p>This eventually fixed the issue. Not something I would&#39;ve ever thought of!</p>]]>
            </description>
        </item>
        <item>
            <title>
                A simple search bar
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-11-a-simple-search-bar
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-11-a-simple-search-bar?utm_source=rss
            </link>
            <pubDate>
                Thu, 11 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>I just added a simple search bar to my <a href="/links">&quot;More ...&quot;</a> page. It just redirects to a <a href="https://duckduckgo.com">DuckDuckGo</a> search with your search term and limits it to my site. Simple, yet effective!</p>

<p>The inspiration for this feature came from <a href="https://smeso.it/">Salvatore Mesoraca</a>&#39;s site. Here&#39;s the snippet, feel free to steal it:</p>

<p><code>jsx
&lt;form className=&quot;search&quot; method=&quot;get&quot; action=&quot;https://duckduckgo.com/&quot; target=&quot;_blank&quot;&gt;
    &lt;input id=&quot;search&quot; type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search via DDG&quot; /&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;sites&quot; value=&quot;garrit.xyz&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&lt;/form&gt;
</code></p>

<h2>Try it out</h2>

<p>Try searching for anything!</p>

<p>&lt;form className=&quot;search&quot; method=&quot;get&quot; action=&quot;https://duckduckgo.com/&quot; target=&quot;_blank&quot;&gt;
    &lt;input id=&quot;search&quot; type=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search via DDG&quot; /&gt;
    &lt;input type=&quot;hidden&quot; name=&quot;sites&quot; value=&quot;garrit.xyz&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;
&lt;/form&gt;</p>]]>
            </description>
        </item>
        <item>
            <title>
                Pandoc: Convert links to footnotes (the easy way)
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-04-pandoc-convert-links-to-footnotes-the-easy-way
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-04-pandoc-convert-links-to-footnotes-the-easy-way?utm_source=rss
            </link>
            <pubDate>
                Thu, 04 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>Pandoc has <a href="https://pandoc.org/MANUAL.html#links">a feature</a> to covert links to footnotes. Unfortunately, this only applies to LaTeX documents. Since I want to stay away from LaTeX for reasons of bloat, I was looking for a more universal approach.</p>

<p>First, I encountered <a href="https://stackoverflow.com/questions/33900067/pandoc-filter-to-add-footnotes-to-links">this</a> thread suggesting to use a regular <a href="https://pandoc.org/filters.html">Pandoc filter</a>. This has one downside though: you need a Haskell toolchain on your system. So I moved on ... </p>

<p>I eventually stumbled across <a href="https://github.com/jgm/pandoc/discussions/9415">this</a> thread, explaining how to do the same thing but with a Lua filter instead of Haskell. Since Lua is embedded into Pandoc, you don&#39;t need to install anything. Hooray for embeddable languages!</p>

<p>Simply place the following snippet into file (<code>/filters/link-to-footnote.lua</code> for example):</p>

<p><code>lua
function Link(link)
    link.content:insert(pandoc.Note(link.target))
    return link.content
end
</code></p>

<blockquote><p><em>Note</em>: If you want to keep the original hyperlink in tact, replace the <code>return link.content</code> with <code>return link</code>.</p></blockquote>

<p>And add the following flag to your Pandoc build command:</p>

<p><code></code>`sh</p>

<h1>!/bin/sh</h1>

<p>pandoc text.md
    -o book.epub \
    --lua-filter=filters/link-to-footnote.lua \ # &lt;-- This one
    --metadata-file metadata.yaml \
    --standalone \
    # ...
<code></code>`</p>

<p>After compiling the document, you should now see that each link has a footnote with the link text.</p>]]>
            </description>
        </item>
        <item>
            <title>
                Fuck trees, use tags
            </title>
            <guid>
                https://garrit.xyz/posts/2024-04-02-fuck-trees-use-tags
            </guid>
            <link>
                https://garrit.xyz/posts/2024-04-02-fuck-trees-use-tags?utm_source=rss
            </link>
            <pubDate>
                Tue, 02 Apr 2024 00:00:00 +0000
            </pubDate>
            <description>
                <![CDATA[<p>We&#39;ve been trained to organize our files into a tree-like structure. A file can only exist once in the entire tree. It may have multiple contexts, but it can only exist once. Here&#39;s an example: you get a really important invoice for your car that you have to keep for your taxes. Where do you store this invoice alongside your other files?</p>

<ul><li>Maybe organized by type:<code>/invoices/important_invoice.pdf</code>?</li><li>Or <code>/tax/2024/important_invoice.pdf</code> since that&#39;s where you will probably need it next?</li><li>But it&#39;s an invoice for my car! So <code>/vehicles/&lt;licenseplate&gt;/important_invoice.pdf</code>?</li></ul>

<p>Whatever strategy you choose, there are probably times where you wish to have used a different directory structure. Sure, you can put the file in one directory and then create a shortcut or link in the other directories, but the original file will only ever exist in one place.</p>

<p>I believe that these tree-like directory structures are inherently flawed, and that tagging systems are superior in almost every way.</p>

<p>What I mean by tags is to organize files/entities/whatever into a flat structure and add meaningful tags/labels to add context. To revise the example above: our <code>important_invoice.pdf</code> could have the following tags:</p>

<ul><li><code>invoice</code></li><li><code>vehicles/&lt;licenseplate&gt;</code></li><li><code>tax/2024</code></li></ul>

<p>One could argue that <code>vehicles</code> and <code>tax</code> could be their own tags, but I specifically choose these tags to prove an important point:</p>

<h2>Tags can mimic trees</h2>

<p>If you think about it, a file path in a sense is just a reference to some location. Files on a physical hard drive aren&#39;t organized in trees. They&#39;re a bunch of ones and zeros slapped together in a pool of other files. A file path is just an abstraction for the user to reference a specific location in this pool of files. A file path is a tag!</p>

<p>Unfortunately, most systems are designed to only allow one path per file. This creates the hierarchical structure we so often use. But as I mentioned above, we could simply assign multiple tags or paths to a single file to organize it in multiple ways. The <code>important_invoice.pdf</code> has little to do with <code>tax</code> or <code>2024</code> as standalone terms, but assigning the tag <code>tax/2024</code>  gives it a similar meaning as a path to a file in a directory. The term <code>invoice</code> is enough to infer that everything using this tag is an invoice. It&#39;s equivalent to having a directory named <code>invoices</code> with multiple files inside.</p>

<p>So, we have established that tags are easily superior to trees. Why are we not using them?</p>

<h2>Tags have bad UX</h2>

<p>There have been many attempts at giving users the possibility to organize their stuff using tags. Your Gmail mails can be labeled, you can use tags for files in MacOS and there are apparently even efforts to create <a href="https://relfs.sourceforge.net/">tag-based filesystems</a>. But none of them were good enough to change the game.</p>

<p>Our brains seem to be so used to the idea of a piece of information only existing at one location at a time that it&#39;s really hard to adapt at this point. I&#39;m sure there are some power users out there who make the most of the limited tagging features of their systems, but what I would really like to see is a real shift in how we store and retrieve information.</p>

<h2>Discussion</h2>

<p>This post has spark some interesting discussion on <a href="https://lobste.rs/s/pssbmx/fuck_trees_use_tags">Lobsters</a>.</p>]]>
            </description>
        </item>
    </channel>
</rss>